"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8552],{3905:(a,e,t)=>{t.d(e,{Zo:()=>o,kt:()=>k});var n=t(7294);function m(a,e,t){return e in a?Object.defineProperty(a,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):a[e]=t,a}function s(a,e){var t=Object.keys(a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(a);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),t.push.apply(t,n)}return t}function r(a){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){m(a,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(t,e))}))}return a}function l(a,e){if(null==a)return{};var t,n,m=function(a,e){if(null==a)return{};var t,n,m={},s=Object.keys(a);for(n=0;n<s.length;n++)t=s[n],e.indexOf(t)>=0||(m[t]=a[t]);return m}(a,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(a);for(n=0;n<s.length;n++)t=s[n],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(a,t)&&(m[t]=a[t])}return m}var p=n.createContext({}),i=function(a){var e=n.useContext(p),t=e;return a&&(t="function"==typeof a?a(e):r(r({},e),a)),t},o=function(a){var e=i(a.components);return n.createElement(p.Provider,{value:e},a.children)},N={inlineCode:"code",wrapper:function(a){var e=a.children;return n.createElement(n.Fragment,{},e)}},c=n.forwardRef((function(a,e){var t=a.components,m=a.mdxType,s=a.originalType,p=a.parentName,o=l(a,["components","mdxType","originalType","parentName"]),c=i(t),k=m,h=c["".concat(p,".").concat(k)]||c[k]||N[k]||s;return t?n.createElement(h,r(r({ref:e},o),{},{components:t})):n.createElement(h,r({ref:e},o))}));function k(a,e){var t=arguments,m=e&&e.mdxType;if("string"==typeof a||m){var s=t.length,r=new Array(s);r[0]=c;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=a,l.mdxType="string"==typeof a?a:m,r[1]=l;for(var i=2;i<s;i++)r[i]=t[i];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},3324:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>r,default:()=>N,frontMatter:()=>s,metadata:()=>l,toc:()=>i});var n=t(7462),m=(t(7294),t(3905));const s={sidebar_label:"collections"},r="Collections",l={unversionedId:"learn/language/java/collections",id:"learn/language/java/collections",title:"Collections",description:"Arrays",source:"@site/docs/learn/language/java/6-collections.mdx",sourceDirName:"learn/language/java",slug:"/learn/language/java/collections",permalink:"/my-blog/vi/docs/learn/language/java/collections",draft:!1,editUrl:"https://github.com/huytunguyenn/my-blog/tree/main/docs/learn/language/java/6-collections.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_label:"collections"},sidebar:"docs",previous:{title:"logic & statements",permalink:"/my-blog/vi/docs/learn/language/java/logic-statements"},next:{title:"methods",permalink:"/my-blog/vi/docs/learn/language/java/functions-methods"}},p={},i=[{value:"Arrays",id:"arrays",level:2},{value:"Problems",id:"problems",level:3},{value:"Collection of Collections",id:"collection-of-collections",level:2},{value:"What to use?",id:"what-to-use",level:3},{value:"Common Behaviors",id:"common-behaviors",level:3},{value:"Common Methods",id:"common-methods",level:4},{value:"Iterator",id:"iterator",level:4},{value:"Collection Factories (Immutable)",id:"collection-factories-immutable",level:3},{value:"Create Empty Collections",id:"create-empty-collections",level:4},{value:"Create Singletons",id:"create-singletons",level:4},{value:"Create (Not Empty) Collections",id:"create-not-empty-collections",level:4},{value:"Create Copies",id:"create-copies",level:4},{value:"Create Views",id:"create-views",level:4},{value:"Collection Operations",id:"collection-operations",level:3},{value:"Lists",id:"lists",level:2},{value:"Key Features",id:"key-features",level:3},{value:"Basic get/set",id:"basic-getset",level:4},{value:"Static Factory Methods",id:"static-factory-methods",level:4},{value:"Lookup &amp; Split",id:"lookup--split",level:4},{value:"Sorting",id:"sorting",level:4},{value:"Implementations",id:"implementations",level:3},{value:"ArrayList",id:"arraylist",level:4},{value:"LinkedList",id:"linkedlist",level:4},{value:"Performance Comparison",id:"performance-comparison",level:3},{value:"Maps",id:"maps",level:2},{value:"Key Features",id:"key-features-1",level:3},{value:"Views",id:"views",level:4},{value:"Immutable Map Factories",id:"immutable-map-factories",level:4},{value:"Alter &amp; Remove",id:"alter--remove",level:4},{value:"Update",id:"update",level:4},{value:"Implementations",id:"implementations-1",level:3},{value:"HashMap",id:"hashmap",level:4},{value:"TreeMap",id:"treemap",level:4},{value:"Advanced",id:"advanced",level:4},{value:"Performance Comparison",id:"performance-comparison-1",level:3},{value:"Streams",id:"streams",level:2},{value:"Intermediate Operations",id:"intermediate-operations",level:3},{value:"Filter",id:"filter",level:4},{value:"Map",id:"map",level:4},{value:"Skip &amp; Limit",id:"skip--limit",level:4},{value:"Sorted",id:"sorted",level:4},{value:"FlatMap",id:"flatmap",level:4},{value:"Terminal Operations",id:"terminal-operations",level:3},{value:"toList",id:"tolist",level:4},{value:"Match",id:"match",level:4},{value:"Find",id:"find",level:4},{value:"Reduce",id:"reduce",level:4},{value:"Collectors",id:"collectors",level:3},{value:"Implementations",id:"implementations-2",level:3},{value:"Primitive Streams",id:"primitive-streams",level:4},{value:"Parallel Streams",id:"parallel-streams",level:4},{value:"Sets",id:"sets",level:2},{value:"Key Features",id:"key-features-2",level:3},{value:"Equality Contract",id:"equality-contract",level:3},{value:"Implementations",id:"implementations-3",level:3},{value:"HashSet",id:"hashset",level:4},{value:"TreeSet",id:"treeset",level:4},{value:"SortedSet",id:"sortedset",level:4},{value:"NavigableSet",id:"navigableset",level:4},{value:"LinkedHashSet",id:"linkedhashset",level:4},{value:"EnumSet",id:"enumset",level:4},{value:"Performance Comparison",id:"performance-comparison-2",level:3}],o={toc:i};function N(a){let{components:e,...s}=a;return(0,m.kt)("wrapper",(0,n.Z)({},o,s,{components:e,mdxType:"MDXLayout"}),(0,m.kt)("h1",{id:"collections"},"Collections"),(0,m.kt)("h2",{id:"arrays"},"Arrays"),(0,m.kt)("p",null,"Arrays provide an ordered collection of elements. They're ",(0,m.kt)("strong",{parentName:"p"},"immutable"),"."),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"float[] theVals = new float[3];\nfloat[] theVals = { 10.0f, 20.0f, 15.0f };\n")),(0,m.kt)("p",null,"In Java, array variables are references. See more at ",(0,m.kt)("a",{parentName:"p",href:"/my-blog/vi/docs/learn/language/java/data-types#reference-types"},"References")," to learn more."),(0,m.kt)("h3",{id:"problems"},"Problems"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},'private static Product[] add(Product product, Product[] array){\n  int length = array.length;\n  var newArray = Arrays.copyOf(array, length + 1);\n  newArray[length] = product;\n  return newArray;\n}\nvar door = new Product("Wooden Door", 35);\nvar floorPanel = new Product("Floor Panel", 25);\nvar window = new Product("Glass Window", 10);\n\n// Create\nProduct[] products = { door, floorPanel };\n// 1. Print - horrible format\n// highlight\nSystem.out.println(products);\n// -highlight\nSystem.out.println(Arrays.toString(products));\n// 2. Add - complex code\n// -error\nproducts[2] = window;  // array is immutable\n// -highlight\nproducts = add(window, products);\n// 3. Duplicates - no way\n// highlight\nproducts = add(window, products);\n')),(0,m.kt)("p",null,"Array is also ",(0,m.kt)("strong",{parentName:"p"},"covariant"),", which means that if a subtype array can be assigned to a supertype array reference variable:"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"class Animal {}\nclass Dog extends Animal {}\n\npublic class ArrayCovarianceExample {\n  public static void main(String[] args) {\n    Dog[] dogs = { new Dog(), new Dog() };\n    Animal[] animals = dogs;  // this is allowed in array\n\n    animals[0].toString();\n    // -error-start\n    // compiler only allows us to call methods in the Animal class\n    animals[0].bark();\n    // -error-end\n    // -highlight-start\n    // if you want to call bark(), you have to downcast\n    // which is really dangerous\n    ((Dog) animals[0]).bark();\n    // -highlight-end\n  }\n}\n")),(0,m.kt)("p",null,(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mo",{parentName:"mrow"},"\u2192")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\rightarrow")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.3669em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"\u2192")))))," So we'd better not using it. Using generic ",(0,m.kt)("inlineCode",{parentName:"p"},"List")," can prevent this, see ",(0,m.kt)("a",{parentName:"p",href:"/my-blog/vi/docs/learn/language/java/advanced#working-with-inheritance"},"example"),".\nSee why we shouldn't downcast ",(0,m.kt)("a",{parentName:"p",href:"/my-blog/vi/docs/learn/language/java/oop#downcasting--instanceof"},"here"),"."),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"List<Integer> nums = Arrays.asList(1, 2, 3);  // [1, 2, 3]\n")),(0,m.kt)("h2",{id:"collection-of-collections"},"Collection of Collections"),(0,m.kt)("p",null,"Each collection has more than 2 different components."),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null},"Interfaces"),(0,m.kt)("th",{parentName:"tr",align:null},"Implementation"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},"Multiple data structures"),(0,m.kt)("td",{parentName:"tr",align:null},"Specific data structures")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},"Functional characteristics (behavior)"),(0,m.kt)("td",{parentName:"tr",align:null},"Performance characteristics")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},"Prefer as ",(0,m.kt)("strong",{parentName:"td"},"variable type")),(0,m.kt)("td",{parentName:"tr",align:null},"Concrete and instantiable")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},"Often has a popular implementation"),(0,m.kt)("td",{parentName:"tr",align:null})))),(0,m.kt)("p",null,(0,m.kt)("img",{alt:"collections&#39; components",src:t(9067).Z,width:"994",height:"512"})),(0,m.kt)("h3",{id:"what-to-use"},"What to use?"),(0,m.kt)("p",null,(0,m.kt)("img",{alt:"collection decision tree",src:t(9395).Z,width:"1024",height:"556"})),(0,m.kt)("h3",{id:"common-behaviors"},"Common Behaviors"),(0,m.kt)("h4",{id:"common-methods"},"Common Methods"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"size()")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"isEmpty()")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"add()")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"addAll()"),": like ",(0,m.kt)("inlineCode",{parentName:"li"},"add")," but for many"),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"remove(element)")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"removeAll(collection)")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"retainAll(collection)"),": retain: gi\u1eef l\u1ea1i"),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"contains(element)")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"containsAll(collection)")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"clear()"))),(0,m.kt)("h4",{id:"iterator"},"Iterator"),(0,m.kt)("p",null,(0,m.kt)("inlineCode",{parentName:"p"},"Collection")," extends ",(0,m.kt)("inlineCode",{parentName:"p"},"Iterable")," (like ",(0,m.kt)("inlineCode",{parentName:"p"},"Iterator"),")."),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"Collection<Product> products = new ArrayList<>();\nproducts.add(door); products.add(floorPanel); products.add(window);\n\n// -error-start\nfor (var product : products) {\n  products.remove(product);   // modification while operation (looping) will crash it\n}\n// -error-end\n// -highlight-start\n// removeIf\nproducts.removeIf(product -> product.weight() > 20);\n// -highlight-end\n\n// -highlight-start\n// use iterator to remove products.\nIterator<Product> iterator = products.iterator();\nwhile (iterator.hasNext()) {\n  final Product product = iterator.next();\n  if (product.weight() > 20) {\n    iterator.remove();\n  }\n}\n// -highlight-end\n")),(0,m.kt)("p",null,"These methods pass in a ",(0,m.kt)("a",{parentName:"p",href:"/my-blog/vi/docs/learn/language/java/advanced#lambda-expressions-1"},"lambda expression")," that implements some common ",(0,m.kt)("a",{parentName:"p",href:"/my-blog/vi/docs/learn/language/java/advanced#standard-functional-interfaces"},"functional interface"),"."),(0,m.kt)("h3",{id:"collection-factories-immutable"},"Collection Factories (Immutable)"),(0,m.kt)("p",null,"Sometimes, the code allows modifying the view that takes change the backing, which violate ",(0,m.kt)("a",{parentName:"p",href:"/my-blog/vi/docs/learn/language/java/oop#encapsulation"},"encapsulation"),".\n",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mo",{parentName:"mrow"},"\u2192")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\rightarrow")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.3669em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"\u2192")))))," these help us to create ",(0,m.kt)("strong",{parentName:"p"},"unmodifiable, immutable"),", empty or wrapping collections. Modification will throw exception."),(0,m.kt)("h4",{id:"create-empty-collections"},"Create Empty Collections"),(0,m.kt)("p",null,"They seem useless, but memory efficient. Use when you want to ",(0,m.kt)("em",{parentName:"p"},"pass no values to a method")," that takes a collection."),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"// immutable\nList<String> list = Collections.emptyList();\nMap<Integer, String> map = Collections.emptyMap();\nSet<Integer> set = Collections.emptySet();\n")),(0,m.kt)("h4",{id:"create-singletons"},"Create Singletons"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},'// immutable\nList<String> list = Collections.singletonList("one");\nMap<Integer, String> map = Collections.singletonMap(1, "one");\nSet<Integer> set = Collections.singletonSet(1);\n')),(0,m.kt)("h4",{id:"create-not-empty-collections"},"Create (Not Empty) Collections"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},'// immutable\nList<String> list = List.of("UK", "USA");\nMap<String, Integer> map = Map.of("UK", 67, "USA", 328);\n// when more than 10 args\nMap<String, Integer> entries = Map.ofEntries(\n  Map.ofEntries(\n    Map.entry("UK", 67),\n    Map.entry("US", 328)\n));\n')),(0,m.kt)("h4",{id:"create-copies"},"Create Copies"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"var mutableList = new HashMap<>();  // this is mutable\n// immutable\nvar immutableCopy = Map.copyOf(mutableList);  // this is immutable\n\n// modifying mutableList does not modify immutableCopy\nmutableCopy.put(key, value);\n")),(0,m.kt)("h4",{id:"create-views"},"Create Views"),(0,m.kt)("p",null,"Views are ",(0,m.kt)("strong",{parentName:"p"},"unmodifiable"),", but they can be read (modify backing list will affect the view).\n",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mo",{parentName:"mrow"},"\u2192")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\rightarrow")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.3669em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"\u2192")))))," use when we want to keep mutation within a class."),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},'// -highlight-start\nCollections.unmodifiableList(list);\nCollections.unmodifiableMap(map);\n// -highlight-end\n\nList<String> countries = new ArrayList<>();\ncountries.add("UK"); countries.add("USA");\n// if countries.add("FR"); is also adding to countriesView\nList<String> countriesView = Collections.unmodifiableList(countries);\n')),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("a",{parentName:"li",href:"#static-factory-methods"},"Static factory methods")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("a",{parentName:"li",href:"#immutable-map-factories"},"Immutable map factories"))),(0,m.kt)("h3",{id:"collection-operations"},"Collection Operations"),(0,m.kt)("p",null,"Useful collection algorithms."),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"var products = new ArrayList<Product>();\nCollections.addAll(products, door, window, chair);\nCollections.rotate(elements, distance); // distance = 1: [a, b, c] -> [c, a, b]\nCollections.shuffle(elements, randomGenerator);  // randomly arrange, default use Java.random\nCollections.binarySearch(elements, key, Comparator);\nCollections.disjoint(a, b);  // true n\u1ebfu kh\xf4ng giao nhau\nCollections.frequency(letters, 'A');\nCollections.max(elements, comparator);  // min\nCollections.fill(list, element);  // replace every element\nCollections.swap(elements, 1, 2);  // swap element by index\nCollections.reverse(elements);\n")),(0,m.kt)("h2",{id:"lists"},"Lists"),(0,m.kt)("p",null,"List are collections with ",(0,m.kt)("strong",{parentName:"p"},"iteration order"),". Every element in the list has an index."),(0,m.kt)("h3",{id:"key-features"},"Key Features"),(0,m.kt)("h4",{id:"basic-getset"},"Basic get/set"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"void add(int index, E e)")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"E get(int index)")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"E remove(int index)")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"E set(int index, E element)")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"boolean addAll(int index, Collection c)"))),(0,m.kt)("h4",{id:"static-factory-methods"},"Static Factory Methods"),(0,m.kt)("p",null,"Creates ",(0,m.kt)("strong",{parentName:"p"},"unmodifiable")," List instance"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"List<E> of()")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"List<E> of(E e1, E e2)")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"List<E> of (E ... elements)")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"List<E> copyOf(Collection<E>)"),": this is a shallow copy (just copies values)")),(0,m.kt)("p",null,"Overloads for 0-10 arguments. For > 10 args, there's ",(0,m.kt)("a",{parentName:"p",href:"/my-blog/vi/docs/learn/language/java/advanced#varargs"},"varargs constructor"),"."),(0,m.kt)("h4",{id:"lookup--split"},"Lookup & Split"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"int indexOf(Object o)"),": return ",(0,m.kt)("inlineCode",{parentName:"li"},"-1")," if not found"),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"int lastIndexOf(Object o)")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"List subList(int fromIndex, int toIndex)"),": this is a view, modifying the view also modifies the backing list itself")),(0,m.kt)("admonition",{type:"info"},(0,m.kt)("p",{parentName:"admonition"},"Modifying a ",(0,m.kt)("strong",{parentName:"p"},"view")," also affects on the backing one.")),(0,m.kt)("h4",{id:"sorting"},"Sorting"),(0,m.kt)("p",null,"Java use TimSort-based algorithm"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"list.sort(Comparator<? Super E> comparator)"),": comparator defines sort order")),(0,m.kt)("p",null,"A Comparator is an interface in Java that defines sort order."),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"// define Comparator\nimport java.util.Comparator;\npublic static final Comparator<Product> BY_WEIGHT = Comparator.comparingInt(Product::weight);\n/**\nimplements\npublic interface Comparator<T> {\n  int compare(T o1, T o2);\n}\n**/\nproducts.sort(Product.BY_WEIGHT);\n")),(0,m.kt)("h3",{id:"implementations"},"Implementations"),(0,m.kt)("admonition",{type:"caution"},(0,m.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Avoid ",(0,m.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"List")," legacy implementations"),(0,m.kt)("p",{parentName:"admonition"},(0,m.kt)("strong",{parentName:"p"},"avoid")," ",(0,m.kt)("inlineCode",{parentName:"p"},"Vector"),", ",(0,m.kt)("inlineCode",{parentName:"p"},"Stack"),", they're synchronized.")),(0,m.kt)("h4",{id:"arraylist"},"ArrayList"),(0,m.kt)("admonition",{title:"How it works",type:"info"},(0,m.kt)("p",{parentName:"admonition"},"There is a ",(0,m.kt)("em",{parentName:"p"},"backing array"),", where there's many space to add, remove, etc. Most of the time, JDK start with an empty backing array.\nWhen you add first element, it grows to the default initial collection size (10)."),(0,m.kt)("p",{parentName:"admonition"},"Once you run out of 10 elements, it starts to ",(0,m.kt)("em",{parentName:"p"},"doubling")," in size.")),(0,m.kt)("p",null,"This is good general purpose implementation, use as default. CPU cache sympathetic."),(0,m.kt)("h4",{id:"linkedlist"},"LinkedList"),(0,m.kt)("p",null,"Has head nodes and tail nodes, they could be the same and pointer at each of them. ",(0,m.kt)("inlineCode",{parentName:"p"},"LinkedList")," in Java is doubly linked list (c\xf3 h\u01b0\u1edbng ng\u01b0\u1ee3c l\u1ea1i)."),(0,m.kt)("p",null,"Most of the time, worse performance. Only good when adding elements at start, adding/remove a lot."),(0,m.kt)("h3",{id:"performance-comparison"},"Performance Comparison"),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null}),(0,m.kt)("th",{parentName:"tr",align:null},"get"),(0,m.kt)("th",{parentName:"tr",align:null},"add"),(0,m.kt)("th",{parentName:"tr",align:null},"contains"),(0,m.kt)("th",{parentName:"tr",align:null},"remove"),(0,m.kt)("th",{parentName:"tr",align:null},"next"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"ArrayList")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mn",{parentName:"mrow"},"1"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(1)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"N"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(N)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")")))))," doubling strategy, copy & expand the list",(0,m.kt)("br",null),(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u03a9"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mn",{parentName:"mrow"},"1"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\Omega(1)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"\u03a9"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")")))))," with larger array"),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"N"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(N)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"N"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(N)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")")))))," delete head"),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mn",{parentName:"mrow"},"1"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(1)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"))))))),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"LinkedList")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"N"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(N)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mn",{parentName:"mrow"},"1"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(1)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"N"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(N)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"N"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(N)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mn",{parentName:"mrow"},"1"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(1)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"))))))))),(0,m.kt)("h2",{id:"maps"},"Maps"),(0,m.kt)("p",null,"Maps are collections of ",(0,m.kt)("strong",{parentName:"p"},"pairs"),", like dictionaries. Key -> Value. Key are unique."),(0,m.kt)("p",null,"Map is better because it helps you not to deal with lookup loop so much. ",(0,m.kt)("inlineCode",{parentName:"p"},"Map")," is the only collections that don't extend or implement the ",(0,m.kt)("inlineCode",{parentName:"p"},"Collection")," interface."),(0,m.kt)("admonition",{type:"info"},(0,m.kt)("p",{parentName:"admonition"},'Java use "map" terms instead of "dictionary", but it\'s actually a class in JDK & it predates the original Java collection API & kind of deprecated at this time. So ',(0,m.kt)("strong",{parentName:"p"},"don't use it"),".")),(0,m.kt)("h3",{id:"key-features-1"},"Key Features"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"V put(K key, V value)"),": return previous value associated with the key, if no, return null"),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"void putAll(Map<? extends K, ? extends V> values)")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"get(Object key)"),": if no, return null"),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"boolean constainsKey(Object key)")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"boolean constainsValue(Object value)")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"V remove(Object key)")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"void clear()"))),(0,m.kt)("p",null,"*",(0,m.kt)("em",{parentName:"p"},"Use Object type rather than K key generic: if you have a local variable that is type of Object and has a string in it, you can use that variable without introducing additional cast to a specific key type")),(0,m.kt)("h4",{id:"views"},"Views"),(0,m.kt)("p",null,"Modify it also modify backing map. All below return a view."),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"var ids = map.keySet();")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"var values = map.values();")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"var entries = map.entrySet();"),": entry represents a <K, V> pair. We cannot add element to entry set, but we can remove")),(0,m.kt)("h4",{id:"immutable-map-factories"},"Immutable Map Factories"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},'Map.Entry<String, Integer> entry = Map.entry("Richard", 38);  // individual key/value pairs\nMap<String, Integer> personToAge = Map.of("Richard", 38);  // up to 10 value specific overload Factories\npersonToAge = Map.ofEntries(Map.entry("Richard", 38));  // for > 10 varargs factory takes entry objects\nMap<String, Integer> copy = Map.copyOf(personToAge);  // immutable copies of existing Map\n')),(0,m.kt)("h4",{id:"alter--remove"},"Alter & Remove"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"replace(key, value)"),": update single value"),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"replaceAll(BiFunction<K, V, V>)"),": replace elements using a function ",(0,m.kt)("inlineCode",{parentName:"li"},"(key, oldValue) -> newValue")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"remove(key, value)"),": remove a key only if it has a value")),(0,m.kt)("h4",{id:"update"},"Update"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"getOrDefault(key, defaultValue)"),": regular ",(0,m.kt)("inlineCode",{parentName:"li"},"get")," returns null if not found"),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"computeIfAbsent(key, function)"),": return value if present. If no, execute function ",(0,m.kt)("inlineCode",{parentName:"li"},"key -> newValue"),", then return the new value"),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"putIfAbsent")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"computeIfPresent")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"compute")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"merge"))),(0,m.kt)("p",null,"Normally, you have yo use ",(0,m.kt)("inlineCode",{parentName:"p"},"entrySet"),", but you can use ",(0,m.kt)("inlineCode",{parentName:"p"},"forEach")," for more convenient."),(0,m.kt)("h3",{id:"implementations-1"},"Implementations"),(0,m.kt)("p",null,(0,m.kt)("inlineCode",{parentName:"p"},"HashMap")," allows null keys & values. ",(0,m.kt)("inlineCode",{parentName:"p"},"TreeMap")," allows null values, but not keys."),(0,m.kt)("h4",{id:"hashmap"},"HashMap"),(0,m.kt)("p",null,"Good general purpose implementation."),(0,m.kt)("admonition",{title:"How it works",type:"info"},(0,m.kt)("p",{parentName:"admonition"},"When put value in hash map, it takes ",(0,m.kt)("inlineCode",{parentName:"p"},".hashCode()")," of the key.\nIt takes a bucket of elements behind that\nIt compute the hash from that key ",(0,m.kt)("inlineCode",{parentName:"p"},"rehash(hash) % bucket_count"),"\n",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mo",{parentName:"mrow"},"\u2192")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\rightarrow")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.3669em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"\u2192")))))," defines a slot within the backing array"),(0,m.kt)("p",{parentName:"admonition"},"Caveat: hash value itself is passed through rehashing function to reduce probability of hash code collision\nBuckets are linked list to accommodate collisions\nIn Java 8, buckets are converted to trees when there are > 8 elements in the linked list")),(0,m.kt)("p",null,"Implement ",(0,m.kt)("inlineCode",{parentName:"p"},"obj.equals()")," & ",(0,m.kt)("inlineCode",{parentName:"p"},"obj.hashCode()"),". Example:"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"@Override\npublic boolean equals(final Object o) {\n  if(this == o) return true;\n  if(o == null || getClass() != o.getClass()) return false;\n  final Animal animal = (Animal) o;\n  return Objects.equals(name, animal.name);  // ? name.equals(animal.name);\n}\n@Override\npublic int hashCode() { return Objects.hash(name); }  // ? name.hashCode();\n")),(0,m.kt)("admonition",{type:"caution"},(0,m.kt)("p",{parentName:"admonition"},"Whatever type used as the keys in ",(0,m.kt)("inlineCode",{parentName:"p"},"HashMap"),", those need to be immutable objects (always return the same value for ",(0,m.kt)("inlineCode",{parentName:"p"},"hashCode")," method).")),(0,m.kt)("h4",{id:"treemap"},"TreeMap"),(0,m.kt)("p",null,"Defines sort order and add functionality"),(0,m.kt)("admonition",{title:"How it works",type:"info"},(0,m.kt)("p",{parentName:"admonition"},"Use red/black tree (a balanced binary tre)")),(0,m.kt)("h4",{id:"advanced"},"Advanced"),(0,m.kt)("p",null,(0,m.kt)("inlineCode",{parentName:"p"},"EnumMap"),", ",(0,m.kt)("inlineCode",{parentName:"p"},"LinkedHashMap"),", ",(0,m.kt)("inlineCode",{parentName:"p"},"IdentityHashMap"),", ",(0,m.kt)("inlineCode",{parentName:"p"},"WeakHashMap")),(0,m.kt)("h3",{id:"performance-comparison-1"},"Performance Comparison"),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null}),(0,m.kt)("th",{parentName:"tr",align:null},"put"),(0,m.kt)("th",{parentName:"tr",align:null},"get"),(0,m.kt)("th",{parentName:"tr",align:null},"containsKey"),(0,m.kt)("th",{parentName:"tr",align:null},"next"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"HashMap")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"N"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(N)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")")))))," worst case, re-expand hash map ",(0,m.kt)("br",null)," ",(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u03a9"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mn",{parentName:"mrow"},"1"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\Omega(1)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"\u03a9"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"N"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(N)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"))))),(0,m.kt)("br",null),(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u03a9"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mn",{parentName:"mrow"},"1"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\Omega(1)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"\u03a9"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"N"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(N)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"))))),(0,m.kt)("br",null),(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u03a9"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mn",{parentName:"mrow"},"1"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\Omega(1)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"\u03a9"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"C"),(0,m.kt)("mi",{parentName:"mrow"},"a"),(0,m.kt)("mi",{parentName:"mrow"},"p"),(0,m.kt)("mi",{parentName:"mrow"},"a"),(0,m.kt)("mi",{parentName:"mrow"},"c"),(0,m.kt)("mi",{parentName:"mrow"},"i"),(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mi",{parentName:"mrow"},"y"),(0,m.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"/"),(0,m.kt)("mi",{parentName:"mrow"},"N"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(Capacity/N)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"C"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"c"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"),(0,m.kt)("span",{parentName:"span",className:"mord"},"/"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"))))))),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"TreeMap")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"l"),(0,m.kt)("mi",{parentName:"mrow"},"o"),(0,m.kt)("mi",{parentName:"mrow"},"g"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"N"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(log(N))")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"))")))))),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"l"),(0,m.kt)("mi",{parentName:"mrow"},"o"),(0,m.kt)("mi",{parentName:"mrow"},"g"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"N"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(log(N))")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"))")))))),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"l"),(0,m.kt)("mi",{parentName:"mrow"},"o"),(0,m.kt)("mi",{parentName:"mrow"},"g"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"N"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(log(N))")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"))")))))),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"l"),(0,m.kt)("mi",{parentName:"mrow"},"o"),(0,m.kt)("mi",{parentName:"mrow"},"g"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"N"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(log(N))")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"))"))))))))),(0,m.kt)("h2",{id:"streams"},"Streams"),(0,m.kt)("p",null,"Alternative to traditional approach of using ",(0,m.kt)("inlineCode",{parentName:"p"},"forEach")," or iterators to operate on collections. Java stream supports ",(0,m.kt)("strong",{parentName:"p"},"functional-style")," programming (see ",(0,m.kt)("a",{parentName:"p",href:"/my-blog/vi/docs/learn/language/java/advanced#capturing-local-variables"},"an example of using stream with no side effect"),")."),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"elements.forEach(e -> ...) // side effecting for each\n")),(0,m.kt)("p",null,(0,m.kt)("strong",{parentName:"p"},"Stream vs. Loops")),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null},"Streams"),(0,m.kt)("th",{parentName:"tr",align:null},"Loops"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},"High level construct (less boilerplate)"),(0,m.kt)("td",{parentName:"tr",align:null},"Low level construct (more control)")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},"Optimized framework"),(0,m.kt)("td",{parentName:"tr",align:null},"Can be faster")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},"Readability"),(0,m.kt)("td",{parentName:"tr",align:null},"Readability (depends)")),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},"Corner cases (stream doesn't throw exceptions)"),(0,m.kt)("td",{parentName:"tr",align:null},"Checked Exceptions")))),(0,m.kt)("p",null,"Stream operations are divided into 2 types:"),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null},"Intermediate"),(0,m.kt)("th",{parentName:"tr",align:null},"Terminal"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},"Everything but the last, returns ",(0,m.kt)("inlineCode",{parentName:"td"},"Stream<T>"),".",(0,m.kt)("br",null)," E.g. ",(0,m.kt)("inlineCode",{parentName:"td"},"filter()")),(0,m.kt)("td",{parentName:"tr",align:null},"Last in the Pipeline, returns values.",(0,m.kt)("br",null)," E.g. ",(0,m.kt)("inlineCode",{parentName:"td"},"toList()"))))),(0,m.kt)("h3",{id:"intermediate-operations"},"Intermediate Operations"),(0,m.kt)("h4",{id:"filter"},"Filter"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"streamOfElements.filter(e -> e.getSize() > 10);\n")),(0,m.kt)("h4",{id:"map"},"Map"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"streamOfElements.map(Element::getName);  // transform elements from this to that\n")),(0,m.kt)("h4",{id:"skip--limit"},"Skip & Limit"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"streamOfElements\n  .skip(elementsOnPage * pageNumber)  // discard next N elements\n  .limit(elementsOnPage)  // only keep next N elements\n")),(0,m.kt)("h4",{id:"sorted"},"Sorted"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"// 1. Sort Comparable objects with default order\nelements.map(Element::getName).sorted()  // String implements Comparable -> alphabetiaclly sort order\n\n// 2. Sort objects with a specified comparator\nComparator<Element> byName = Comparator.comparing(Element::getName);\nelements.sorted(byName)\n")),(0,m.kt)("h4",{id:"flatmap"},"FlatMap"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"// transform elements from one value in to zero, one or many values\n// flatMap function recieves a stream of value\n// here, we replace streamOfShipments with streamOfProducts\nstreamOfShipments.flatMap(shipment -> shipment.getLightProducts().stream())\n\nList<Integer> nums = Arrays.asList(1, 2, 3);\nnums.stream()\n  .map(num -> Arrays.asList(num, num * 2))  // [1, 2], [2, 4], [3, 6]\n  .flatMap(Collection::stream)  // [1, 2, 2, 4, 3, 6]\n// or\nnums.stream()\n  .flatMap(num -> Arrays.asList(num, num * 2).stream())\n")),(0,m.kt)("h3",{id:"terminal-operations"},"Terminal Operations"),(0,m.kt)("h4",{id:"tolist"},"toList"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"elementStream.toList();  // create a List, it is unmodifiable\n\n// Object[]\nelementStream.toArray();  // create objects array\n\n// Element[]\nelementStream.toArray(Element[]::new);  // pass a function to create specific array type\n")),(0,m.kt)("p",null,(0,m.kt)("em",{parentName:"p"},"Note, ",(0,m.kt)("inlineCode",{parentName:"em"},"toList")," is introduced in Java 16. If you're using Java 8, you can use ",(0,m.kt)("a",{parentName:"em",href:"#collectors"},"collectors"),": ",(0,m.kt)("inlineCode",{parentName:"em"},"collect(Collectors.toList())"))),(0,m.kt)("h4",{id:"match"},"Match"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"// these all returns a boolean\n// if any/none/all elements match a predicate\nelements.anyMatch( e -> e.getWeight() > 20 );\n\nelements.noneMatch( e -> e.getWeight() > 20 );\n\nelements.allMatch( e -> e.getWeight() > 20 );\n")),(0,m.kt)("h4",{id:"find"},"Find"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"// max/min element given a sort order\nelements.max(Comparator.comparingInt(Element::getSize))\n\n// findFirst (or findAny()) get the element\nelements.filter(...).findFirst()\n\n// count number of elements in a stream\nelements.filter(...).count()\n")),(0,m.kt)("h4",{id:"reduce"},"Reduce"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"// combine elements together using a combining function & an accumulator\nelements.reduce(0, (accumlate, e) -> accumlate + e.getSize())\n")),(0,m.kt)("h3",{id:"collectors"},"Collectors"),(0,m.kt)("p",null,"Collectors are operations that happen at the end of Streams, so they are terminal operations."),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"elements.stream().filter(...).sorted(...)\n  .collect(Collectors.toList());\n  // add static import so we don't need `Collectors.` part\n  .collect(groupingBy(Element:getName));\n  /**\n  this is called downstream collectors\n  counting() is like count() but it takes elements passed by groupingBy()\n  this count each group elements\n  result is converted from string (return type of groupingBy) to long (return type of counting)\n  **/\n  .collect(groupingBy(Element:getName), counting()));  // Collectors.groupingBy, Collectors.counting\n\n")),(0,m.kt)("h3",{id:"implementations-2"},"Implementations"),(0,m.kt)("p",null,(0,m.kt)("a",{parentName:"p",href:"/my-blog/vi/docs/learn/language/java/wrapper-classes#implementation"},"Boxed numeric is much larger & slower than primitives"),". Java provides streams with primitives."),(0,m.kt)("h4",{id:"primitive-streams"},"Primitive Streams"),(0,m.kt)("p",null,"Improve performance over boxed numeric streams. Functionality like ",(0,m.kt)("inlineCode",{parentName:"p"},"sum()")," for primitives. Only specialized for 3 primitives: ",(0,m.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,m.kt)("inlineCode",{parentName:"p"},"long"),", ",(0,m.kt)("inlineCode",{parentName:"p"},"double")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"strings.mapToInt(String::length)  // return string stream\nIntStream.of(1, 2)\nIntStream.range(start, end)\n")),(0,m.kt)("h4",{id:"parallel-streams"},"Parallel Streams"),(0,m.kt)("p",null,"Streams can be run in parallel mode. Run on the common fork-join pool of the JVM. Potentially, but not always, a performance improvement."),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"collection.parallelStream()\nstream.parallel()\n")),(0,m.kt)("h2",{id:"sets"},"Sets"),(0,m.kt)("p",null,"Collection with ",(0,m.kt)("strong",{parentName:"p"},"uniqueness"),", no duplicates."),(0,m.kt)("h3",{id:"key-features-2"},"Key Features"),(0,m.kt)("h3",{id:"equality-contract"},"Equality Contract"),(0,m.kt)("p",null,(0,m.kt)("inlineCode",{parentName:"p"},"hashCode")," and ",(0,m.kt)("inlineCode",{parentName:"p"},"equals"),". This is 1-way implication, means 2 different objects can have the same ",(0,m.kt)("inlineCode",{parentName:"p"},"hashCode"),", but if they are the same object, they must have the same ",(0,m.kt)("inlineCode",{parentName:"p"},"hashCode"),"."),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-bash"},"object.equals(other) -> object.hashCode() == other.hashCode()\n")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"Arrays.hashCode()\nLong.hashCode(longValue)  // Java 8+\n// old\n(int) (l ^ (l >>> 32 ))\nFloat.floatToIntBits(f);  // because hash code is a 32-bit integer\nObjects.hash()  // Java 7+\n")),(0,m.kt)("h3",{id:"implementations-3"},"Implementations"),(0,m.kt)("h4",{id:"hashset"},"HashSet"),(0,m.kt)("p",null,"Based upon ",(0,m.kt)("inlineCode",{parentName:"p"},"HashMap"),", use ",(0,m.kt)("inlineCode",{parentName:"p"},"hashCode")," and looks up location, good for general."),(0,m.kt)("h4",{id:"treeset"},"TreeSet"),(0,m.kt)("p",null,"Based upon ",(0,m.kt)("inlineCode",{parentName:"p"},"TreeMap")," (red/black binary tree with defined sort order). Provide extra features:"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"SortedSet")),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("inlineCode",{parentName:"li"},"NavigableSet"))),(0,m.kt)("h4",{id:"sortedset"},"SortedSet"),(0,m.kt)("p",null,"Defines an order, no indexes, but subset views possible. It extends ",(0,m.kt)("inlineCode",{parentName:"p"},"Set")," interface."),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"E first();\nE last();\n\nSortedSet tailSet(E fromElement);\nSortedSet headSet(E toElement);\nSortedSet subSet(E fromElement, E toElement);\n")),(0,m.kt)("h4",{id:"navigableset"},"NavigableSet"),(0,m.kt)("p",null,"Extends ",(0,m.kt)("inlineCode",{parentName:"p"},"SortedSet"),", provides ways to move through the order, implemented by ",(0,m.kt)("inlineCode",{parentName:"p"},"TreeSet"),"."),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre",className:"language-java"},"E lower(E e);\nE higher(E e);\n\nE floor(E e);\nE ceiling(E e);\n\nE pollFirst();\nE pollLast();\n")),(0,m.kt)("h4",{id:"linkedhashset"},"LinkedHashSet"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},"When to use: copying Set to modify, deduping List or Queue."),(0,m.kt)("li",{parentName:"ul"},"Maintains order: only insertion"),(0,m.kt)("li",{parentName:"ul"},"Overhead: Slower than ",(0,m.kt)("inlineCode",{parentName:"li"},"HashSet"),", less memory than ",(0,m.kt)("inlineCode",{parentName:"li"},"TreeSet"))),(0,m.kt)("h4",{id:"enumset"},"EnumSet"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},"Keys are Enums: faster and low memory usage"),(0,m.kt)("li",{parentName:"ul"},"Bitset implementation: only a single long if < 64 elements")),(0,m.kt)("h3",{id:"performance-comparison-2"},"Performance Comparison"),(0,m.kt)("table",null,(0,m.kt)("thead",{parentName:"table"},(0,m.kt)("tr",{parentName:"thead"},(0,m.kt)("th",{parentName:"tr",align:null}),(0,m.kt)("th",{parentName:"tr",align:null},"add"),(0,m.kt)("th",{parentName:"tr",align:null},"contains"),(0,m.kt)("th",{parentName:"tr",align:null},"next"))),(0,m.kt)("tbody",{parentName:"table"},(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"HashSet")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"N"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u03a9"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mn",{parentName:"mrow"},"1"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(N) \\Omega(1)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"),(0,m.kt)("span",{parentName:"span",className:"mord"},"\u03a9"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"l"),(0,m.kt)("mi",{parentName:"mrow"},"o"),(0,m.kt)("mi",{parentName:"mrow"},"g"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"N"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u03a9"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mn",{parentName:"mrow"},"1"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(log(N)) \\Omega(1)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"))"),(0,m.kt)("span",{parentName:"span",className:"mord"},"\u03a9"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"C"),(0,m.kt)("mi",{parentName:"mrow"},"a"),(0,m.kt)("mi",{parentName:"mrow"},"p"),(0,m.kt)("mi",{parentName:"mrow"},"a"),(0,m.kt)("mi",{parentName:"mrow"},"c"),(0,m.kt)("mi",{parentName:"mrow"},"i"),(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mi",{parentName:"mrow"},"y"),(0,m.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"/"),(0,m.kt)("mi",{parentName:"mrow"},"N"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(Capacity/N)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"C"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"p"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"c"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"),(0,m.kt)("span",{parentName:"span",className:"mord"},"/"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"))))))),(0,m.kt)("tr",{parentName:"tbody"},(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("inlineCode",{parentName:"td"},"TreeSet")),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"l"),(0,m.kt)("mi",{parentName:"mrow"},"o"),(0,m.kt)("mi",{parentName:"mrow"},"g"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"N"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(log(N))")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"))")))))),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"l"),(0,m.kt)("mi",{parentName:"mrow"},"o"),(0,m.kt)("mi",{parentName:"mrow"},"g"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"N"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(log(N))")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"))")))))),(0,m.kt)("td",{parentName:"tr",align:null},(0,m.kt)("span",{parentName:"td",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"l"),(0,m.kt)("mi",{parentName:"mrow"},"o"),(0,m.kt)("mi",{parentName:"mrow"},"g"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"N"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(log(N))")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"))"))))))))))}N.isMDXComponent=!0},9395:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/collection-decision-tree-34a5a4c92093dd313d35e6c1673e10ab.png"},9067:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/collections-component-46f58113170db8f8d237a384f74b7944.png"}}]);