"use strict";(self.webpackChunktu_website=self.webpackChunktu_website||[]).push([[6856],{1027:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var s=t(5893),i=t(1151);const a={sidebar_label:"data types"},r="Data types",o={id:"learn/language/golang/data-types",title:"Data types",description:"Data types in Go",source:"@site/docs/learn/language/golang/4-data-types.mdx",sourceDirName:"learn/language/golang",slug:"/learn/language/golang/data-types",permalink:"/my-blog/vi/docs/learn/language/golang/data-types",draft:!1,unlisted:!1,editUrl:"https://github.com/huytunguyenn/my-blog/tree/main/docs/learn/language/golang/4-data-types.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"data types"},sidebar:"docs",previous:{title:"setup",permalink:"/my-blog/vi/docs/learn/language/golang/setup"},next:{title:"logic & statements",permalink:"/my-blog/vi/docs/learn/language/golang/statement"}},l={},c=[{value:"Declaration and primitives",id:"declaration-and-primitives",level:2},{value:"Pointer",id:"pointer",level:2},{value:"Address of a variable",id:"address-of-a-variable",level:3},{value:"Constant",id:"constant",level:2},{value:"Implicit typed",id:"implicit-typed",level:3},{value:"iota",id:"iota",level:3},{value:"constant expression",id:"constant-expression",level:3}];function d(n){const e={a:"a",admonition:"admonition",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",math:"math",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,i.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"data-types",children:"Data types"}),"\n",(0,s.jsx)(e.p,{children:"Data types in Go"}),"\n",(0,s.jsx)(e.h2,{id:"declaration-and-primitives",children:"Declaration and primitives"}),"\n",(0,s.jsx)(e.p,{children:"There are many ways to declare a variable. Most basic three initializations are:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["explicit: declare the type + ",(0,s.jsx)(e.code,{children:"var"})," or ",(0,s.jsx)(e.code,{children:"const"})," syntax"]}),"\n",(0,s.jsx)(e.li,{children:"explicit inline"}),"\n",(0,s.jsxs)(e.li,{children:["implicit: using ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:":="})}),", compiler will declare the type for you ",(0,s.jsxs)(e.span,{className:"katex",children:[(0,s.jsx)(e.span,{className:"katex-mathml",children:(0,s.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(e.semantics,{children:[(0,s.jsx)(e.mrow,{children:(0,s.jsx)(e.mo,{children:"\u2190"})}),(0,s.jsx)(e.annotation,{encoding:"application/x-tex",children:"\\leftarrow"})]})})}),(0,s.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(e.span,{className:"base",children:[(0,s.jsx)(e.span,{className:"strut",style:{height:"0.3669em"}}),(0,s.jsx)(e.span,{className:"mrel",children:"\u2190"})]})})]})," ",(0,s.jsx)(e.strong,{children:"used most of the time"})]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'// explicit\nvar i int\ni = 42\n\n// explicit inline\nvar f float32 = 3.14\n\n// implicit\nsomeString := "Go is great!"\n'})}),"\n",(0,s.jsx)(e.p,{children:"Some primitives:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:"someString := \"Go\"\n// -error\nsomeString := 'Go' // error: more than one character in rune literal\nsomeBool := true\nsomeComplex := complex(3, 4)\nsomeReal, someIm := real(someComplex), imag(someComplex) // split out complex number into its real & imaginary components\n\n// highlight-start\n(3 + 4i), complex number: s\u1ed1 ph\u1ee9c, i^2 = -1\n> someComplex: (+3.000000e+000+4.000000e+000i)\n> someReal: +3.000000e+000\n> someIm: +4.000000e+000\n// highlight-end\n"})}),"\n",(0,s.jsx)(e.h2,{id:"pointer",children:"Pointer"}),"\n",(0,s.jsx)(e.p,{children:"Pointer holds the address of a location in memory that holds the variable."}),"\n",(0,s.jsx)(e.p,{children:"If you are not pointing the pointer to anything when declared, it will get error when assigned."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'var myName *string // not pointing to anything -> so it is <nil>\n\n// -error\n*myName = "huytu" // runtime error: invalid memory address or nil pointer dereference\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Therefore, you will need to assign ",(0,s.jsx)(e.code,{children:"new"})," for pointer when initialized. You can use ",(0,s.jsx)(e.code,{children:"*"})," operator to reach though the pointer and grab the data back, this is call ",(0,s.jsx)(e.strong,{children:"de-referencing"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'var myName *string = new(string) // not :=\n*myName = "huytu"   // de-referencing\n\n\n// highlight-start\n> myName: 0xc000040250\n> *myName: huytu\n// highlight-end\n'})}),"\n",(0,s.jsx)(e.h3,{id:"address-of-a-variable",children:"Address of a variable"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'myName := "huytu"\nptr := &myName\n// change value\nmyName = "zzzz"\n\n\n// highlight-start\n> ptr: 0xc000040250\n> *ptr: huytu\nafter change value\n> ptr: 0xc000040250\n> *ptr: zzzz\n// highlight-end\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsxs)(e.em,{children:["You can see, I use ",(0,s.jsx)(e.code,{children:":="})," for implicit declare, ",(0,s.jsx)(e.code,{children:"="})," for assign operator."]})}),"\n",(0,s.jsx)(e.h2,{id:"constant",children:"Constant"}),"\n",(0,s.jsxs)(e.p,{children:["Constant is constant, it cannot be assigned after created. Therefore, we ",(0,s.jsxs)(e.strong,{children:["use ",(0,s.jsx)(e.code,{children:"="})," instead of ",(0,s.jsx)(e.code,{children:":="})]}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:"const pi = 3.1415\n// -error\npi = 3 // cannot assign to pi (untyped float constant 3.1415)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"implicit-typed",children:"Implicit typed"}),"\n",(0,s.jsx)(e.p,{children:"Implicit syntax means compiler will interpret type as appropriate."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:"// implicit\nconst c = 3 // not declare type, but it knows it's integer\n\n// explicit\nconst c int = 3\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Constant have to be ",(0,s.jsx)(e.strong,{children:"defined at compile time"}),". If you set up a constant expression and set it equal to the return value of a function, you will get an error."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:"const c int = 3\nres1 := c + 3\n// -error\nres2 := c + 1.2 // error: (untyped float constant) truncated to int\n\n\n// highlight-start\n> res1: 6\n>\n// highlight-end\n"})}),"\n",(0,s.jsx)(e.p,{children:"To fix this, you will need to convert first."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:"const c int = 3\nres1 := c + 3\nres2 := float32(c) + 1.2\n\n\n// highlight-start\n> res1: 6\n> res2: 4.2\n// highlight-end\n\n// -error\nres1 = float32(c) + 1.2 // warning: cannot use 'float32(c) + 1.2' (type float32) as the type int\n"})}),"\n",(0,s.jsx)(e.p,{children:"Note that Go is a statically typed language, which means types of variables must be known at compile time, and you can't change their type at runtime."}),"\n",(0,s.jsx)(e.admonition,{type:"tip",children:(0,s.jsxs)(e.p,{children:["The standard naming convention is to ",(0,s.jsx)(e.strong,{children:"use PascalCase for constants"}),". E.g.: ",(0,s.jsx)(e.code,{children:"MyConst"})," instead of ",(0,s.jsx)(e.code,{children:"MY_CONST"}),"."]})}),"\n",(0,s.jsx)(e.h3,{id:"iota",children:"iota"}),"\n",(0,s.jsx)(e.p,{children:"Look at some examples here:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:"const (\n\tfirst = iota\n\tsecond\n)\n\nconst (\n\tthird = iota\n\tfourth\n)\n\n\n// highlight-start\n> first: 0\n> second: 1\n> third: 0\n> fourth: 1\n// highlight-end\n"})}),"\n",(0,s.jsx)(e.p,{children:"And another example:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'const (\n\tfirst  = 1\n\tsecond = "second"\n\tthree  = iota\n\tfour   = iota\n)\n\nfunc main() {\n\tprintln(three, four)\n\tprintln(first, second)\n\tprintln(three, four)\n}\n\n\n// highlight-start\n> 2 3\n> 1 second\n> 2 3\n// highlight-end\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsxs)(e.em,{children:["Can you guess how ",(0,s.jsx)(e.code,{children:"iota"})," works?"]})}),"\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"iota"})," keyword represents successive integer constants 0, 1, 2, ...:"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Increments ",(0,s.jsx)(e.em,{children:"after each usage"})," (aka ",(0,s.jsx)(e.code,{children:"const"})," specification)"]}),"\n",(0,s.jsxs)(e.li,{children:["Resets to 0 whenever the word ",(0,s.jsx)(e.code,{children:"const"})," appears"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"constant-expression",children:"constant expression"}),"\n",(0,s.jsxs)(e.p,{children:["You can use many constant expressions with ",(0,s.jsx)(e.code,{children:"iota"})," as well."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:"const (\n\tfirst  = iota + 6\n\tsecond = 2 << iota\n)\n\n\n// highlight-start\n> first: 6\n> second: 4 (2 << 1)\n// highlight-end\n"})}),"\n",(0,s.jsxs)(e.p,{children:["If you don't need to write ",(0,s.jsx)(e.code,{children:"iota"})," expression on every line of constants, one on the first const means apply all for the rest."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:"const (\n\tfirst = iota + 6\n\tsecond // shortcut for `second: iota + 6`\n)\n\nconst (\n\tthird = iota\n)\n\n\n// highlight-start\n> first: 6\n> second: 7\n> third: 0\n// highlight-end\n\n// -error-start\nconst (\n\tfirst\n\tsecond = iota // error: missing value in the const declaration\n\tthird\n)\n// -error-end\n"})}),"\n",(0,s.jsxs)(e.p,{children:["You can use the blank identifier ",(0,s.jsx)(e.code,{children:"_"})," to skip a value in a list of constants."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:"const (\n    first = iota + 1\n    _\n    third\n    fourth\n)\n\n\n// highlight-start\n> first: 1\n> third: 3\n> fourth: 4\n// highlight-end\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Another common application for iota is to implement a ",(0,s.jsx)(e.strong,{children:"bitmask"}),", a small set of booleans, often called flags, represented by the bits in a single number. ",(0,s.jsx)(e.a,{href:"https://yourbasic.org/golang/bitmask-flag-set-clear/",children:"Read more"})]}),"\n",(0,s.jsx)(e.h1,{id:"custom-data-types",children:"Custom data types"})]})}function h(n={}){const{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>o,a:()=>r});var s=t(7294);const i={},a=s.createContext(i);function r(n){const e=s.useContext(a);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),s.createElement(a.Provider,{value:e},n.children)}}}]);