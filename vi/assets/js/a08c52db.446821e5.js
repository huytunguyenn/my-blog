"use strict";(self.webpackChunktu_website=self.webpackChunktu_website||[]).push([[5459],{8659:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>o});var s=i(5893),a=i(1151);const r={sidebar_label:"cpp notes",description:"Summary some useful code snippets for competitive programming"},t="Code snippets (CPP version)",l={id:"learn/algorithm/CP-notes",title:"Code snippets (CPP version)",description:"Summary some useful code snippets for competitive programming",source:"@site/docs/learn/algorithm/99-CP-notes.mdx",sourceDirName:"learn/algorithm",slug:"/learn/algorithm/CP-notes",permalink:"/my-blog/vi/docs/learn/algorithm/CP-notes",draft:!1,unlisted:!1,editUrl:"https://github.com/huytunguyenn/my-blog/tree/main/docs/learn/algorithm/99-CP-notes.mdx",tags:[],version:"current",sidebarPosition:99,frontMatter:{sidebar_label:"cpp notes",description:"Summary some useful code snippets for competitive programming"},sidebar:"docs",previous:{title:"prim",permalink:"/my-blog/vi/docs/learn/algorithm/prim"},next:{title:"database",permalink:"/my-blog/vi/docs/category/database"}},c={},o=[{value:"Input &amp; output",id:"input--output",level:2},{value:"Read integer input",id:"read-integer-input",level:3},{value:"Built-in functions",id:"built-in-functions",level:2},{value:"Max, min",id:"max-min",level:3},{value:"Sorting",id:"sorting",level:3},{value:"Using lambda",id:"using-lambda",level:3},{value:"Example:",id:"example",level:5},{value:"Array tips",id:"array-tips",level:2},{value:"Declare 2-dimension array",id:"declare-2-dimension-array",level:3},{value:"Declare",id:"declare",level:3},{value:"Examples",id:"examples",level:4},{value:"Data structures",id:"data-structures",level:2},{value:"Set",id:"set",level:2},{value:"Counter",id:"counter",level:3},{value:"Heap",id:"heap",level:2}];function d(e){const n={a:"a",admonition:"admonition",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"code-snippets-cpp-version",children:"Code snippets (CPP version)"}),"\n",(0,s.jsx)(n.admonition,{title:"a wise man once said",type:"note",children:(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["CPP means competitive programming in Python ",":D"]})})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Some code snippets in Python that I concluded so that I can do LeetCode faster."})}),"\n",(0,s.jsx)(n.h2,{id:"input--output",children:"Input & output"}),"\n",(0,s.jsx)(n.p,{children:"In some platforms like Codeforces or UVA, sometimes reading input is complicated if you're not familiar with it."}),"\n",(0,s.jsx)(n.h3,{id:"read-integer-input",children:"Read integer input"}),"\n",(0,s.jsx)(n.p,{children:"Read an integer in a line:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"n = int(input())\n"})}),"\n",(0,s.jsx)(n.p,{children:"Read many integers in a line:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# highlight\n9, 10\n\nna,nb = map(int, input().split())\n\n# highlight\n> na: 9, nb: 10\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Read many lines into an array, use ",(0,s.jsx)(n.code,{children:"list(map(int, input().split()))"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# highlight-start\n2 4\n5 6\n# highlight-end\n\na = []\nfor i in range(2):\n  a.extend(list(map(int,input().split())))\n\n# highlight\n> a: [2, 4, 5, 6]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"built-in-functions",children:"Built-in functions"}),"\n",(0,s.jsx)(n.p,{children:"Python has many things that has built up for us. Why not using them?"}),"\n",(0,s.jsx)(n.h3,{id:"max-min",children:"Max, min"}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"max"}),", ",(0,s.jsx)(n.code,{children:"min"})," for faster finding:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"current_max = max(current_max, array[i])\ncurrent_min = min(current_min, array[i])\n"})}),"\n",(0,s.jsx)(n.h3,{id:"sorting",children:"Sorting"}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"sort"})," to sort array (mutable). The complexity is usually ",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsxs)(n.mrow,{children:[(0,s.jsx)(n.mi,{children:"O"}),(0,s.jsx)(n.mo,{stretchy:"false",children:"("}),(0,s.jsx)(n.mi,{children:"N"}),(0,s.jsx)(n.mi,{children:"L"}),(0,s.jsx)(n.mi,{children:"O"}),(0,s.jsx)(n.mi,{children:"G"}),(0,s.jsx)(n.mi,{children:"N"}),(0,s.jsx)(n.mo,{stretchy:"false",children:")"})]}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"O(NLOGN)"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,s.jsx)(n.span,{className:"mopen",children:"("}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.10903em"},children:"N"}),(0,s.jsx)(n.span,{className:"mord mathnormal",children:"L"}),(0,s.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.10903em"},children:"OGN"}),(0,s.jsx)(n.span,{className:"mclose",children:")"})]})})]}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"arr.sort()\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"sorted"})," for immutable:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"sorted_arr = sorted(arr)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-lambda",children:"Using lambda"}),"\n",(0,s.jsxs)(n.p,{children:["Lambda function is an anonymous function with 1 expression. You can prefer something like ",(0,s.jsx)(n.code,{children:"(x) => x + 1"})," in JavaScript for example."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"x = lambda a : a + 10\nprint(x(5)) # 15\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can use lambda function with ",(0,s.jsx)(n.code,{children:"map"}),", ",(0,s.jsx)(n.code,{children:"filter"}),", etc."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["Note that ",(0,s.jsx)(n.code,{children:"map"})," returns map object so we have to convert it to array using ",(0,s.jsx)(n.code,{children:"list()"})]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"arr = [1, 2, 3, 4, 5]\nlist(map(lambda n: n * 2, arr))\n\n# highlight\n> [2, 4, 6, 8, 10]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["One ",(0,s.jsx)(n.em,{children:"example"})," that we want addition of arrays.  For example, [1, 2, 1, 0] plus [0, 1, 2, 1] like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:" 1 2 1 0\n 0 1 2 1\n 1 3 3 1 <-\n"})}),"\n",(0,s.jsx)(n.p,{children:"Simply add is not going to work:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"sum = [1, 2, 1, 0] + [0, 1, 2, 1]\n\n# highlight\n> sum: [1, 2, 1, 0, 0, 1, 2, 1]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["So we use ",(0,s.jsx)(n.strong,{children:"lambda function"})," with ",(0,s.jsx)(n.code,{children:"map()"})," and convert it using ",(0,s.jsx)(n.code,{children:"list()"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"arr1 = [1, 2, 1, 0]\narr2 = [0, 1, 2, 1]\nsum = list(map(lambda x, y: x + y, arr1, arr2))\n\n# highlight\n> sum: [1, 3, 3, 1]\n"})}),"\n",(0,s.jsx)(n.h5,{id:"example",children:"Example:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/pascals-triangle/",children:"LeetCode 118: Pascal's Triangle"}),", ",(0,s.jsx)(n.a,{href:"https://github.com/tu-learnspace/algorithms/blob/main/01-Dynamic-Array-%26-String/LC-118-Pascal's-Triangle.py",children:"solution"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"array-tips",children:"Array tips"}),"\n",(0,s.jsx)(n.h3,{id:"declare-2-dimension-array",children:"Declare 2-dimension array"}),"\n",(0,s.jsx)(n.p,{children:"Instead of:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"2d_arr = [0] * rows\nfor i in range(rows):\n  res[i] = [0] * cols\n\n# highlight-start\n# for example with rows = 3, cols = 4:\n[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n0 0 0 0\n0 0 0 0\n0 0 0 0\n# highlight-end\n"})}),"\n",(0,s.jsx)(n.p,{children:"Do these:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"2d_arr = [[0 for _ in range(cols)] for _ in range(rows)]\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Note that we don't use"})," ",(0,s.jsx)(n.code,{children:"arr = [] * n"}),(0,s.jsx)(n.em,{children:", cause this is not create anything. So we had to have initial value for array."})]}),"\n",(0,s.jsx)(n.h3,{id:"declare",children:"Declare"}),"\n",(0,s.jsxs)(n.p,{children:["When we do things related to 2-D array, remember divide (",(0,s.jsx)(n.code,{children:"//"}),") and module (",(0,s.jsx)(n.code,{children:"%"}),")."]}),"\n",(0,s.jsx)(n.h4,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.h2,{id:"data-structures",children:"Data structures"}),"\n",(0,s.jsx)(n.h2,{id:"set",children:"Set"}),"\n",(0,s.jsx)(n.h3,{id:"counter",children:"Counter"}),"\n",(0,s.jsx)(n.p,{children:"When counter problems that requires counting elements repeat, etc. Example is the problem that ask for repeat of each character in a string."}),"\n",(0,s.jsxs)(n.p,{children:["We can use ",(0,s.jsx)(n.code,{children:"Counter"})," from ",(0,s.jsx)(n.code,{children:"collections"})," library, this data structure creates a dictionary that has element is ",(0,s.jsx)(n.strong,{children:"key"}),", ",(0,s.jsx)(n.strong,{children:"value"})," is ",(0,s.jsx)(n.code,{children:"count"})," variable."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from collections import Counter\n\n# create dictionary stores <objects,counts> as <key,value>\ncnt = Counter('hello world')\n\ncnt['o']  # 2, count of character 'c'\ncnt['o'] += 1\n"})}),"\n",(0,s.jsx)(n.h2,{id:"heap",children:"Heap"})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>t});var s=i(7294);const a={},r=s.createContext(a);function t(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);