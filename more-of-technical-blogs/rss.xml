<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>huytu Blog</title>
        <link>https://huytunguyenn.github.io/my-blog/more-of-technical-blogs</link>
        <description>huytu Blog</description>
        <lastBuildDate>Wed, 15 May 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[the first 2 measurement units]]></title>
            <link>https://huytunguyenn.github.io/my-blog/more-of-technical-blogs/concurrency-series-1-measurement</link>
            <guid>https://huytunguyenn.github.io/my-blog/more-of-technical-blogs/concurrency-series-1-measurement</guid>
            <pubDate>Wed, 15 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Chắc hẳn ai cũng muốn (không muốn thì đến lúc cũng phải muốn) cái app mình code chạy nhanh nhất,]]></description>
            <content:encoded><![CDATA[<p>Chắc hẳn ai cũng muốn (không muốn thì đến lúc cũng phải muốn) cái app mình code chạy nhanh nhất,
responsive nhất nên không lạ gì với các thông số đo đạc performance của hệ thống
để biết nó nhanh hay chậm. Vài cái tiêu biểu là latency &amp; throughput.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="concurrency-series-1-đo-đạc-tốc-độ">[Concurrency series] #1 Đo đạc tốc độ<a href="https://huytunguyenn.github.io/my-blog/more-of-technical-blogs/concurrency-series-1-measurement#concurrency-series-1-%C4%91o-%C4%91%E1%BA%A1c-t%E1%BB%91c-%C4%91%E1%BB%99" class="hash-link" aria-label="Direct link to [Concurrency series] #1 Đo đạc tốc độ" title="Direct link to [Concurrency series] #1 Đo đạc tốc độ">​</a></h3>
<p><strong>Latency (độ trễ)</strong> là thời gian từ khi gói tin được gửi đi cho đến khi gói tin
được nhận, hay là thời gian từ khi bắt đầu tới khi hoàn thành task, hay là.
Latency cao nghĩa là độ trễ cao, aka thời gian hoàn thành lớn-chậm.</p>
<p><strong>Throughput (thông lượng)</strong> là số byte gửi/nhận trong 1 giây của mạng, là số lượng
task mà system có thể handle trong 1 khoảng thời gian. Nó thể hiện cho “năng suất”.</p>
<blockquote>
<p><em>Một ví dụ đơn giản là xe máy &amp; xe bus, xe máy có thể nhanh gấp đôi xe bus nhưng
xe bus lại chở được số lượng x25 lần xe máy. Xe bus có throughput lớn hơn xe máy.</em></p>
</blockquote>
<p>**</p>
<p><em><strong>Vậy là hệ thống throughput cao thì latency thấp?</strong></em> Cũng không hẳn như vậy:</p>
<blockquote>
<p><em>Xe máy chở đc 1 người/h, xe bus thì chở 50 người/2h (là 25 người/h). Trong trường
hợp này, xe bus có throughput cao, nhưng latency nó cũng cao hơn xe máy. In the end,
nó vẫn phải tốn 2h để hoàn thành nhiệm vụ</em></p>
</blockquote>
<p>→ Tương tự trong hệ thống máy tính, <strong>không phải throughput cao là đồng nghĩa với latency thấp.</strong></p>
<p>Có 2 điều cần lưu ý rằng:</p>
<ul>
<li>Cải thiện yếu tố này có thể làm tệ đi yếu tố còn lại.</li>
<li>Các khái niệm trái nghĩa nhau không đồng thời triệt tiêu nhau mà có thể tồn tại cùng nhau (cái này nói sau hehe).</li>
</ul>
<p>Nói một cách technical hơn 1 long-running task có thể được chia nhỏ thành nhiều
task có thể được thực thi <em>song song</em>, giúp giảm thời gian thực thi → giảm latency.
Nhiều task được thực hiện <em>đồng thời</em> cũng là giúp tăng throughput.</p>
<p><code>x</code> còn giúp <strong>che giấu latency.</strong></p>
<blockquote>
<p><em>Một ví dụ đời thực là khi chờ xe bus, thay vì chỉ ngồi chờ, chúng ta có thể làm
những task khác như đọc sách, check mail, tin nhắn, gọi điện, ăn sáng, etc.</em></p>
</blockquote>
<p>Đây là những hành động vô thức mà ta làm thường ngày. Tại sao chúng ta làm? → Bởi vì chúng ta “thấy” nó optimize hoạt động của mình.</p>
<p><em>Tại sao nó optimize? Việc chúng check mail trong lúc chờ xe bus không giúp xe bus đi nhanh hơn?</em></p>
<p>→ Well thực tế bởi vì chúng ta đã che giấu đi độ trễ của xe bus, i.e. làm task khác trong
thời gian đợi task có latency cao. Đây cũng là một ví dụ cho thấy che giấu latency
là một trong những key cho 1 responsive system (và đây là đáp án đầu tiên cho bài toán liên quan tới việc waiting).</p>
<p>** <em>Chatchit</em></p>
<p><em><strong>Q:</strong></em> Wait, what is <code>x</code>?</p>
<p><em><strong>A:</strong></em> Based on the title and the bold words, you’ve already known. It is concurrency.</p>
<p><em><strong>Q:</strong></em> Vậy nói 1 hồi thì liên quan gì tới measurement?</p>
<p><em><strong>A:</strong></em> Vì nó là động lực. Concurrency không mới nhưng nó là skill cần thiết với modern systems ngày nay.</p>
<p><em><strong>Q:</strong></em> What is concurrency?</p>
<p><em><strong>A:</strong></em> Dunno yet.</p>
<hr>
<p><strong>ResRef</strong>: Kirill Bobrov, Manning Publications - Grokking Concurrency</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[blob-la-gi]]></title>
            <link>https://huytunguyenn.github.io/my-blog/more-of-technical-blogs/2024/1/4/career/blob-la-gi</link>
            <guid>https://huytunguyenn.github.io/my-blog/more-of-technical-blogs/2024/1/4/career/blob-la-gi</guid>
            <pubDate>Thu, 04 Jan 2024 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Duck typing]]></title>
            <link>https://huytunguyenn.github.io/my-blog/more-of-technical-blogs/duck-typing</link>
            <guid>https://huytunguyenn.github.io/my-blog/more-of-technical-blogs/duck-typing</guid>
            <pubDate>Fri, 29 Dec 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[ABC//medium.com/always-be-coding/abc-always-be-coding-d5f8051afce2]]></description>
            <content:encoded><![CDATA[<p>ABC: <a href="https://medium.com/always-be-coding/abc-always-be-coding-d5f8051afce2" target="_blank" rel="noopener noreferrer">https://medium.com/always-be-coding/abc-always-be-coding-d5f8051afce2</a></p>
<p>Broken windows: <a href="https://en.wikipedia.org/wiki/Broken_windows_theory" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Broken_windows_theory</a></p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="tách-hàm-như-thế-nào">Tách hàm như thế nào<a href="https://huytunguyenn.github.io/my-blog/more-of-technical-blogs/duck-typing#t%C3%A1ch-h%C3%A0m-nh%C6%B0-th%E1%BA%BF-n%C3%A0o" class="hash-link" aria-label="Direct link to Tách hàm như thế nào" title="Direct link to Tách hàm như thế nào">​</a></h2>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    src = if imageDownloadUrl != null then builtins.fetchurl {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    } else fetchEcr {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    };</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><a href="https://en.wikipedia.org/wiki/Duck_typing" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Duck_typing</a></p>
<p>Nếu có thể cho rằng bất cứ thứ gì biết bơi đều là vịt vì vịt có thể bơi thì cá voi có thể được coi là vịt; tuy nhiên, nếu người ta cũng cho rằng con vịt phải có khả năng bay thì con cá voi sẽ không được coi là con vịt.</p>
<p>So it seems weird that the function has to be executed either with args A, B or with arg C, D, but no overlap. It doesn't even attempt to catch odd case if all args are specified.</p>
<p>This should be separated back into two separate unrelated functions for clarity, and shouldn't be <code>doEverything(args, for, all, possible, cases)</code></p>
<p>I don't know if I'd agree with that. It's fine to have two functions returning the same "type" (i.e. in nix's case, similar to JavaScripts, using duck typing). But having function distinctly doing different things just so that it returns same return type is weird. If one function fails to return, for example, imageTag and that key is needed for evaluation, nix evaluation will fail with error message. And if it's not needed, no harm if function doesn't return it.</p>
<p>I.e. there are many functions in nix (that can be used) for fetching git source code: fetchUrl, fetchGit, fetchGitHub, fetchGitLab, fetchTarball, fetchBitbucket, fetchgitLocal , fetchgitPrivate, and possibly even more. There even other functions for svn, hg, and other source-related fetches. Each, in the end, returns one same thing, a git repo. But you'll notice that there is not a function fetchRepo(name, revision, url, git, github, gitlab, tarball, bitbucket, local, private) which would reuse first two args, and then require exclusive 3rd arg (or some combination of exclusive arg sets, such as sometimes asking for authentication or w/e else). Because such a function would be unmanageable and confusing. So I think it's best to separate the two, and, in addition, make it clearer which one is fetching from where and requires what data explicitly (e.g. Ecr fetch always would require aws creds, not optionally)</p>]]></content:encoded>
            <category>career</category>
        </item>
        <item>
            <title><![CDATA[Tản màn về scripts (2023)]]></title>
            <link>https://huytunguyenn.github.io/my-blog/more-of-technical-blogs/my-experience-about-writing-scripts</link>
            <guid>https://huytunguyenn.github.io/my-blog/more-of-technical-blogs/my-experience-about-writing-scripts</guid>
            <pubDate>Fri, 29 Dec 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Tâm sự nhảm (skip for now):]]></description>
            <content:encoded><![CDATA[<p><em>Tâm sự nhảm (skip for now):</em>
Năm mới sắp hết, hôm nay là ngày làm việc cuối cùng của năm - friday 29/12
(thật ra hôm nay booked off rồi <!-- -->:v<!-- -->). Nên cũng muốn viết một cái gì đó. Cho nên
hôm nay sẽ viết về một thứ liên quan tới công việc của mình trong nửa cuối năm
vừa qua, đó chính là làm việc với scripts.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="kinh-nghiệm-với">Kinh nghiệm với<a href="https://huytunguyenn.github.io/my-blog/more-of-technical-blogs/my-experience-about-writing-scripts#kinh-nghi%E1%BB%87m-v%E1%BB%9Bi" class="hash-link" aria-label="Direct link to Kinh nghiệm với" title="Direct link to Kinh nghiệm với">​</a></h2>
<p>Chúng ta luôn có folder dự phòng <code>/tmp</code> ở đâu đó.</p>
<p>Khi làm một lệnh gì đó nên check nếu lệnh đó có thể fail và gây crash. Một số ví dụ</p>
<ol>
<li></li>
</ol>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># Copy file ở SOURCE -&gt; TARGET</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">scp $SOURCE/my_awesome_file $TARGET:/still_my_awesome_file</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Nên:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">scp ... || (echo "failed yada yada"; exit 1)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Những lệnh <code>cd</code> về technically vẫn có thể failed với những unexpected path.</p>
<p>Use "|| true" to avoid interruption on stopping failure</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker-compose -f ${hostConfig.dockerComposeYmlPath} down -v || true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This stop on errors but hide all errors.</p>
<ol start="2">
<li>Error</li>
</ol>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mkdir -p ${hostConfig.dockerRootDataDir} || true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo "Success!"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>$\leftarrow$<code>|| true</code> here seems pointless, as it'll continue anyway. Also confusing in that it'll always write Success! even if mkdir fails -&gt; It was meant to be <code>|| exit 1</code></p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">if [ ! -f "$file_path" ]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  echo "Expecting the file at path $file_path but it's unavailable. Stop now"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>should be going to stderr via &gt;&amp;2?</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># For debug when needed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">set -x</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Dump là gì?]]></title>
            <link>https://huytunguyenn.github.io/my-blog/more-of-technical-blogs/what-is-dump</link>
            <guid>https://huytunguyenn.github.io/my-blog/more-of-technical-blogs/what-is-dump</guid>
            <pubDate>Fri, 22 Dec 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Dump là gì?]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="dump-là-gì">Dump là gì?<a href="https://huytunguyenn.github.io/my-blog/more-of-technical-blogs/what-is-dump#dump-l%C3%A0-g%C3%AC" class="hash-link" aria-label="Direct link to Dump là gì?" title="Direct link to Dump là gì?">​</a></h2>]]></content:encoded>
            <category>career</category>
        </item>
    </channel>
</rss>