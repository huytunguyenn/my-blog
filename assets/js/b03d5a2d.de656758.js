"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4058],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(a),d=r,g=u["".concat(s,".").concat(d)]||u[d]||c[d]||l;return a?n.createElement(g,i(i({ref:t},m),{},{components:a})):n.createElement(g,i({ref:t},m))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5823:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const l={sidebar_label:"methods"},i="Methods",o={unversionedId:"learn/language/java/functions-methods",id:"learn/language/java/functions-methods",title:"Methods",description:"Method is mechanism for organizing code. It enables creation of reusable code.",source:"@site/docs/learn/language/java/7-functions-methods.mdx",sourceDirName:"learn/language/java",slug:"/learn/language/java/functions-methods",permalink:"/my-blog/docs/learn/language/java/functions-methods",draft:!1,editUrl:"https://github.com/huytunguyenn/my-blog/tree/main/docs/learn/language/java/7-functions-methods.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_label:"methods"},sidebar:"docs",previous:{title:"collections",permalink:"/my-blog/docs/learn/language/java/collections"},next:{title:"packages",permalink:"/my-blog/docs/learn/language/java/packages"}},s={},p=[{value:"Declare &amp; Call",id:"declare--call",level:2},{value:"Command-line arguments",id:"command-line-arguments",level:3},{value:"Parameters",id:"parameters",level:2},{value:"Primitive Type Parameters",id:"primitive-type-parameters",level:3},{value:"Object Parameters",id:"object-parameters",level:3},{value:"Overloading",id:"overloading",level:2},{value:"Overriding",id:"overriding",level:2}],m={toc:p};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"methods"},"Methods"),(0,r.kt)("p",null,"Method is mechanism for organizing code. It enables creation of reusable code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"return-type name (typed-parameter-list) {\n  statements\n}\n")),(0,r.kt)("h2",{id:"declare--call"},"Declare & Call"),(0,r.kt)("p",null,"We can have method call above its declaration."),(0,r.kt)("h3",{id:"command-line-arguments"},"Command-line arguments"),(0,r.kt)("p",null,"Receives an array as parameter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public static void main(String[] args) { }\n")),(0,r.kt)("p",null,"Here, ",(0,r.kt)("em",{parentName:"p"},"Hello")," and ",(0,r.kt)("em",{parentName:"p"},"Mary Ann")," is the ",(0,r.kt)("inlineCode",{parentName:"p"},"args"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'java com.example.Main Hello "Mary Ann"\n')),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,"Parameter receives a copy of the original value."),(0,r.kt)("h3",{id:"primitive-type-parameters"},"Primitive Type Parameters"),(0,r.kt)("p",null,"Primitive types are passed into parameter as ",(0,r.kt)("strong",{parentName:"p"},"copies")," of values."),(0,r.kt)("h3",{id:"object-parameters"},"Object Parameters"),(0,r.kt)("p",null,"Objects are passed by ",(0,r.kt)("strong",{parentName:"p"},"copies")," of references."),(0,r.kt)("p",null,"Changes to the reference are visible ",(0,r.kt)("strong",{parentName:"p"},"within method"),", not visible outside method."),(0,r.kt)("p",null,"Look at this example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Flight a = new Flight(10);\nFlight b = new Flight(20);\nswap(a, b);\nSystem.out.println(a, b);  // a: Flight(10), b: Flight(20)\n\nstatic void swap(Flight i, Flight j) {\n  Flight k = i;\n  i = j;\n  j = k;\n}\n")),(0,r.kt)("p",null,"This is how it works:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"a -------\x3e Flight(10) <------ j\nb -------\x3e Flight(20) <------ i\n                              k\n\nIn the end, we swap references i, j (i points to the one that j originally pointed and vice versa)\nWhen exit function, all copies get cleaned up (i, j, k)\n")),(0,r.kt)("p",null,"In fact, we want to change members of objects ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mo",{parentName:"mrow"},"\u2192")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\rightarrow")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.3669em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"\u2192")))))," using ",(0,r.kt)("em",{parentName:"p"},"method"),", specifically ",(0,r.kt)("strong",{parentName:"p"},"getters, setters")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Flight a = new Flight(10);\nFlight b = new Flight(20);\nswapNumbers(a, b);\nSystem.out.println(a, b);  // a: Flight(20), b: Flight(10)\n\nstatic void swapNumbers(Flight i, Flight j) {      // above code:\n  int k = i.getFlightNumber();              // Flight k = i;\n  i.setFlightNumber(j.getFlightNumber());   // i = j;\n  j.setFlightNumber(k);                     // j = k;\n}\n")),(0,r.kt)("h2",{id:"overloading"},"Overloading"),(0,r.kt)("p",null,"Method can have many overloads, they must have a unique signature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public void func1(Param a) {}\npublic void func1(int a, int b) {}\npublic void func1(Param a, int b) {\n  func1(10, 20);\n}\n")),(0,r.kt)("p",null,"If there's no exact match overload of method, compiler could do automatically conversion."),(0,r.kt)("h2",{id:"overriding"},"Overriding"),(0,r.kt)("p",null,"Inheritance"))}c.isMDXComponent=!0}}]);