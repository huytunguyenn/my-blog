"use strict";(self.webpackChunktu_website=self.webpackChunktu_website||[]).push([[2878],{850:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>o});var s=a(5893),l=a(1151);const r={sidebar_label:"collections"},i="Collection",t={id:"learn/language/golang/collection",title:"Collection",description:"Array",source:"@site/docs/learn/language/golang/6-collection.mdx",sourceDirName:"learn/language/golang",slug:"/learn/language/golang/collection",permalink:"/my-blog/docs/learn/language/golang/collection",draft:!1,unlisted:!1,editUrl:"https://github.com/huytunguyenn/my-blog/tree/main/docs/learn/language/golang/6-collection.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_label:"collections"},sidebar:"docs",previous:{title:"logic & statements",permalink:"/my-blog/docs/learn/language/golang/statement"},next:{title:"methods",permalink:"/my-blog/docs/learn/language/golang/function-method"}},c={},o=[{value:"Array",id:"array",level:2},{value:"Slice",id:"slice",level:2},{value:"Map",id:"map",level:2},{value:"Struct",id:"struct",level:2}];function d(e){const n={admonition:"admonition",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",math:"math",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",...(0,l.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"collection",children:"Collection"}),"\n",(0,s.jsx)(n.h2,{id:"array",children:"Array"}),"\n",(0,s.jsx)(n.p,{children:"An array in Go is a fixed sized entity. All elements in an array must have same type."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"// long way\nvar arr [3]int\narr[0] = 1\narr[1] = 2\narr[2] = 3\n\n// short way\narr := [3]int{1, 2, 3}\n\n\n// highlight\n> [1 2 3]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"slice",children:"Slice"}),"\n",(0,s.jsxs)(n.p,{children:["Slice is built on top of array. It is like array, but ",(0,s.jsx)(n.em,{children:"dynamically sized"})," and offer up a lot of really ",(0,s.jsx)(n.em,{children:"neat attributes"})," ",(0,s.jsxs)(n.span,{className:"katex",children:[(0,s.jsx)(n.span,{className:"katex-mathml",children:(0,s.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,s.jsxs)(n.semantics,{children:[(0,s.jsx)(n.mrow,{children:(0,s.jsx)(n.mo,{children:"\u2190"})}),(0,s.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\leftarrow"})]})})}),(0,s.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,s.jsxs)(n.span,{className:"base",children:[(0,s.jsx)(n.span,{className:"strut",style:{height:"0.3669em"}}),(0,s.jsx)(n.span,{className:"mrel",children:"\u2190"})]})})]})," ",(0,s.jsx)(n.strong,{children:"used more than array"})]}),"\n",(0,s.jsxs)(n.p,{children:["Therefore, you can create slice from array by using ",(0,s.jsx)(n.code,{children:"[start:end]"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"arr := [3]int{1, 2, 3}\nslice := arr[:] // [:] means from start to end\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Slice is kind of pointer, not really, but it is pointing to underlying array. Change ",(0,s.jsx)(n.code,{children:"arr"})," will change ",(0,s.jsx)(n.code,{children:"slice"})," as well."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"arr[1] = 42\nslice[2] = 27\n\n\n// highlight-start\n> arr: [1 42 27]\n> slice: [1 42 27]\n// highlight-end\n"})}),"\n",(0,s.jsx)(n.p,{children:"Otherwise, create a new slice:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"slice := []int{1, 2, 3}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Using ",(0,s.jsx)(n.code,{children:"append(slice, elements...)"})," to add new ",(0,s.jsx)(n.code,{children:"elements"})," to ",(0,s.jsx)(n.code,{children:"slice"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"slice = append(slice, 4, 5, 6)\n\n\n// highlight\n> slice: [1 2 3 4 5 6]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Just like create slice from array, we can also create sub slices from slice using ",(0,s.jsx)(n.code,{children:"[start:end]"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"s2 := slice[1:]\ns3 := slice[:2]\ns4 := slice[1:2]\n\n\n// highlight-start\n> s2: [2 3 4 5 6]\n> s3: [1 2]\n> s4: [2]\n// highlight-end\n"})}),"\n",(0,s.jsx)(n.h2,{id:"map",children:"Map"}),"\n",(0,s.jsxs)(n.p,{children:["Map represents key-value relationship. To create map, use ",(0,s.jsx)(n.code,{children:"map"})," keyword."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'m := map[string]int{ "foo" : 42 }\n\n\n// highlight-start\n> m: map[foo:42]\n> m["foo"]: 42\n// highlight-end\n'})}),"\n",(0,s.jsx)(n.p,{children:"All the keys had to be the same type, same with all the values."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'m["foo"] = 27\n// -error\nm["foo"] = "bar" // error: (type string) cannot be represented by the type int\n'})}),"\n",(0,s.jsxs)(n.p,{children:["You can delete a pair using ",(0,s.jsx)(n.code,{children:"delete(map, key)"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'delete(m, "foo")\n\n\n// highlight\n> m: map[]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"struct",children:"Struct"}),"\n",(0,s.jsxs)(n.p,{children:["Go doesn't have class, but it has ",(0,s.jsx)(n.code,{children:"struct"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["This is the only collection type that allows ",(0,s.jsx)(n.strong,{children:"associate disparate data types together"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.code,{children:"struct"}),", field is fixed at compile time. To declare a ",(0,s.jsx)(n.code,{children:"struct"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"type user struct {\n  ID        int\n  FirstName string\n  LastName  string\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"To add the value to field:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"var u user\n\n\n// highlight\n> u: {0  } // struct initialized with 0 value (0 in int is 0, 0 in string in blank)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'u.ID = 1\nu.FirstName = "Huy"\nu.LastName = "Tu"\n\n\n// highlight\n> u: {1 Huy Tu}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Note that the fields are fixed at compile time, means it cannot be dynamically added or removed."}),"\n",(0,s.jsxs)(n.p,{children:["There's also an implicit way to declare ",(0,s.jsx)(n.code,{children:"struct"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'u := user{ID: 1, FirstName: "Huy", LastName: "Tu"}\n\n\n// highlight\n> u: {1 Huy Tu}\n'})}),"\n",(0,s.jsxs)(n.admonition,{type:"warning",children:[(0,s.jsxs)(n.p,{children:["If you use multiple lines declaration, you will need to ",(0,s.jsx)(n.strong,{children:"add a comma at the end"}),"."]}),(0,s.jsx)(n.p,{children:"Below declaration will get error:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'u := user{ ID: 1,\n  FirstName: "Huy",\n  // -error\n  LastName: "Tu" // error: Need a trailing comma before a newline in the composite literal\n}\n'})})]})]})}function h(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,a)=>{a.d(n,{Z:()=>t,a:()=>i});var s=a(7294);const l={},r=s.createContext(l);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);