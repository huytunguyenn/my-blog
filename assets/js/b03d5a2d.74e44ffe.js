"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4058],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(a),d=i,h=m["".concat(s,".").concat(d)]||m[d]||p[d]||l;return a?n.createElement(h,r(r({ref:t},u),{},{components:a})):n.createElement(h,r({ref:t},u))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var c=2;c<l;c++)r[c]=a[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5823:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var n=a(7462),i=(a(7294),a(3905));const l={sidebar_label:"methods"},r="Methods",o={unversionedId:"learn/language/java/functions-methods",id:"learn/language/java/functions-methods",title:"Methods",description:"Method is mechanism for organizing code. It enables creation of reusable code.",source:"@site/docs/learn/language/java/7-functions-methods.mdx",sourceDirName:"learn/language/java",slug:"/learn/language/java/functions-methods",permalink:"/my-blog/docs/learn/language/java/functions-methods",draft:!1,editUrl:"https://github.com/huytunguyenn/my-blog/tree/main/docs/learn/language/java/7-functions-methods.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_label:"methods"},sidebar:"docs",previous:{title:"collections",permalink:"/my-blog/docs/learn/language/java/collections"},next:{title:"packages",permalink:"/my-blog/docs/learn/language/java/packages"}},s={},c=[{value:"Declare &amp; Call",id:"declare--call",level:2},{value:"Command-line arguments",id:"command-line-arguments",level:3},{value:"Parameters",id:"parameters",level:2},{value:"Primitive Type Parameters",id:"primitive-type-parameters",level:3},{value:"Object Parameters",id:"object-parameters",level:3},{value:"Overloading",id:"overloading",level:2},{value:"Overriding",id:"overriding",level:2},{value:"Initializations",id:"initializations",level:2},{value:"Constructors",id:"constructors",level:3},{value:"Field initializers",id:"field-initializers",level:3},{value:"Constructor Visibility",id:"constructor-visibility",level:3},{value:"Chaining Constructors",id:"chaining-constructors",level:3},{value:"Initialization Blocks",id:"initialization-blocks",level:3},{value:"Finalizations",id:"finalizations",level:2},{value:"Garbage Collector",id:"garbage-collector",level:3},{value:"Finalize",id:"finalize",level:3}],u={toc:c};function p(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"methods"},"Methods"),(0,i.kt)("p",null,"Method is mechanism for organizing code. It enables creation of reusable code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"return-type name (typed-parameter-list) {\n  statements\n}\n")),(0,i.kt)("h2",{id:"declare--call"},"Declare & Call"),(0,i.kt)("p",null,"We can have method call above its declaration."),(0,i.kt)("h3",{id:"command-line-arguments"},"Command-line arguments"),(0,i.kt)("p",null,"Receives an array as parameter"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public static void main(String[] args) { }\n")),(0,i.kt)("p",null,"Here, ",(0,i.kt)("em",{parentName:"p"},"Hello")," and ",(0,i.kt)("em",{parentName:"p"},"Mary Ann")," is the ",(0,i.kt)("inlineCode",{parentName:"p"},"args"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'java com.example.Main Hello "Mary Ann"\n')),(0,i.kt)("h2",{id:"parameters"},"Parameters"),(0,i.kt)("p",null,"Parameter receives a copy of the original value."),(0,i.kt)("h3",{id:"primitive-type-parameters"},"Primitive Type Parameters"),(0,i.kt)("p",null,"Primitive types are passed into parameter as ",(0,i.kt)("strong",{parentName:"p"},"copies")," of values."),(0,i.kt)("h3",{id:"object-parameters"},"Object Parameters"),(0,i.kt)("p",null,"Objects are passed by ",(0,i.kt)("strong",{parentName:"p"},"copies")," of references."),(0,i.kt)("p",null,"Changes to the reference are visible ",(0,i.kt)("strong",{parentName:"p"},"within method"),", not visible outside method."),(0,i.kt)("p",null,"Look at this example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Flight a = new Flight(10);\nFlight b = new Flight(20);\nswap(a, b);\nSystem.out.println(a, b);  // a: Flight(10), b: Flight(20)\n\nstatic void swap(Flight i, Flight j) {\n  Flight k = i;\n  i = j;\n  j = k;\n}\n")),(0,i.kt)("p",null,"This is how it works:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"a -------\x3e Flight(10) <------ j\nb -------\x3e Flight(20) <------ i\n                              k\n\nIn the end, we swap references i, j (i points to the one that j originally pointed and vice versa)\nWhen exit function, all copies get cleaned up (i, j, k)\n")),(0,i.kt)("p",null,"In fact, we want to change members of objects ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mo",{parentName:"mrow"},"\u2192")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\rightarrow")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.3669em"}}),(0,i.kt)("span",{parentName:"span",className:"mrel"},"\u2192")))))," using ",(0,i.kt)("em",{parentName:"p"},"method"),", specifically ",(0,i.kt)("strong",{parentName:"p"},"getters, setters")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Flight a = new Flight(10);\nFlight b = new Flight(20);\nswapNumbers(a, b);\nSystem.out.println(a, b);  // a: Flight(20), b: Flight(10)\n\nstatic void swapNumbers(Flight i, Flight j) {      // above code:\n  int k = i.getFlightNumber();              // Flight k = i;\n  i.setFlightNumber(j.getFlightNumber());   // i = j;\n  j.setFlightNumber(k);                     // j = k;\n}\n")),(0,i.kt)("h2",{id:"overloading"},"Overloading"),(0,i.kt)("p",null,"Method can have many overloads, they must have a unique signature."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public void func1(Param a) {}\npublic void func1(int a, int b) {}\npublic void func1(Param a, int b) {\n  func1(10, 20);\n}\n")),(0,i.kt)("p",null,"If there's no exact match overload of method, compiler could do automatically conversion."),(0,i.kt)("h2",{id:"overriding"},"Overriding"),(0,i.kt)("p",null,"Inheritance"),(0,i.kt)("h2",{id:"initializations"},"Initializations"),(0,i.kt)("p",null,"Summary, initialization work in this order:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Field initializers"),(0,i.kt)("li",{parentName:"ol"},"Initialization blocks"),(0,i.kt)("li",{parentName:"ol"},"Constructors")),(0,i.kt)("h3",{id:"constructors"},"Constructors"),(0,i.kt)("p",null,"Java ",(0,i.kt)("strong",{parentName:"p"},"only")," automatically provide empty constructor when we don't have any at all. This means if you have other constructor than default constructor, you have to declare it or you cannot use default constructor."),(0,i.kt)("h3",{id:"field-initializers"},"Field initializers"),(0,i.kt)("p",null,"You can set initial field values. Or the default initial state of fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"byte, short, int, long: 0"),(0,i.kt)("li",{parentName:"ul"},"float, double: 0.0"),(0,i.kt)("li",{parentName:"ul"},'char: "\\u0000"'),(0,i.kt)("li",{parentName:"ul"},"bolean: false"),(0,i.kt)("li",{parentName:"ul"},"reference types: null")),(0,i.kt)("h3",{id:"constructor-visibility"},"Constructor Visibility"),(0,i.kt)("p",null,"It can be private."),(0,i.kt)("h3",{id:"chaining-constructors"},"Chaining Constructors"),(0,i.kt)("p",null,"One constructor can call another:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"must be ",(0,i.kt)("strong",{parentName:"li"},"first line")," of constructor"),(0,i.kt)("li",{parentName:"ul"},"use this keyword followed by parameter list")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Person {\n  int age;\n  int house;\n  double houseFee;\n\n  Person(int house) {\n    // -highlight\n    this(house > 1 ? 10.0d : 20.0d);\n    this.house = house;\n  }\n\n  Person(int house, int age) {\n    // -highlight\n    this(house);\n    this.age = age;\n  }\n\n  Person(double houseFee) {\n    this.houseFee = houseFee;\n  }\n}\n\nPerson jason = new Person(10, 20);\n")),(0,i.kt)("h3",{id:"initialization-blocks"},"Initialization Blocks"),(0,i.kt)("p",null,"Share code across all constructors:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"cannot receive parameters"),(0,i.kt)("li",{parentName:"ul"},"place code within brackets outside of any method or constructor")),(0,i.kt)("p",null,"A class can have multiple:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"all always execute"),(0,i.kt)("li",{parentName:"ul"},"execute in order starting at the top of the source file")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public class Flight {\n  private int passengers, int seats = 150;\n  private int flightNumber;\n  private bolean[] isSeatAvailable = new boolean[seats];\n\n  // -error-start\n  public Flight() {\n    for(int i = 0; i < seats; i++) {\n      isSeatAvailable[i] = true;\n    }\n  }\n  // -error-end\n\n  // -highlight-start\n  {\n    for(int i = 0; i < seats; i++) {\n      isSeatAvailable[i] = true;\n    }\n  }\n  // -highlight-end\n\n  public Flight(int flightNumber) {\n    // -error\n    this(); // no more needed\n    this.flightNumber = fightNumber;\n  }\n\n  // Note that, initialization blocks do not replace the default constructor.\n  public Flight() {}  // so we still need if you want a default constructor\n}\n")),(0,i.kt)("h2",{id:"finalizations"},"Finalizations"),(0,i.kt)("h3",{id:"garbage-collector"},"Garbage Collector"),(0,i.kt)("h3",{id:"finalize"},"Finalize"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"class Database {\n  protected void finalize() {\n  }\n}\n")))}p.isMDXComponent=!0}}]);