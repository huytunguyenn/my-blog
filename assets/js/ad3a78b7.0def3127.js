"use strict";(self.webpackChunktu_website=self.webpackChunktu_website||[]).push([[4133],{6465:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>l});var r=s(5893),i=s(1151);const t={sidebar_label:"characteristics"},a="Characteristics",o={id:"learn/framework/nodejs/characteristics",title:"Characteristics",description:"Some other server-side architectures:",source:"@site/docs/learn/framework/nodejs/2-characteristics.mdx",sourceDirName:"learn/framework/nodejs",slug:"/learn/framework/nodejs/characteristics",permalink:"/my-blog/docs/learn/framework/nodejs/characteristics",draft:!1,unlisted:!1,editUrl:"https://github.com/huytunguyenn/my-blog/tree/main/docs/learn/framework/nodejs/2-characteristics.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"characteristics"},sidebar:"docs",previous:{title:"intro",permalink:"/my-blog/docs/learn/framework/nodejs/intro"},next:{title:"repl & cli",permalink:"/my-blog/docs/learn/framework/nodejs/repl"}},c={},l=[{value:"Event Loop",id:"event-loop",level:2},{value:"Asynchronous Development",id:"asynchronous-development",level:2},{value:"Node APIs",id:"node-apis",level:2},{value:"Streams",id:"streams",level:2},{value:"Readable Streams",id:"readable-streams",level:3},{value:"Writable Streams",id:"writable-streams",level:3},{value:"Piping Streams",id:"piping-streams",level:3},{value:"Read/Write Streams (Duplex, Transform)",id:"readwrite-streams-duplex-transform",level:3},{value:"Testing",id:"testing",level:2}];function d(e){const n={a:"a",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",math:"math",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"characteristics",children:"Characteristics"}),"\n",(0,r.jsx)(n.p,{children:"Some other server-side architectures:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Process-per-client (Multi-process)"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Each incoming request is allocated a process from a pool of processes ",(0,r.jsx)(n.em,{children:"(either existing one or a new one is forked)"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Handling multiple requests simultaneously -> run many processes (each still handling just ",(0,r.jsx)(n.strong,{children:"one request at a time"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Code running in each process is effectively ",(0,r.jsx)(n.strong,{children:"isolated and unaware of the other requests"})," being handled simultaneously."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Thread-Per-Client (Multi-threaded)"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A single process may have a pool of many threads.\n",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsx)(n.mrow,{children:(0,r.jsx)(n.mo,{children:"\u2192"})}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\rightarrow"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.3669em"}}),(0,r.jsx)(n.span,{className:"mrel",children:"\u2192"})]})})]})," concurrency is based on how many threads are available."]}),"\n",(0,r.jsxs)(n.li,{children:["Code running is isolated to a single thread, may be ",(0,r.jsx)(n.em,{children:"aware of other concurrent requests"}),", especially if they're accessing shared memory."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"event-loop",children:"Event Loop"}),"\n",(0,r.jsxs)(n.p,{children:["Learn about ",(0,r.jsx)(n.a,{href:"/my-blog/docs/learn/framework/nodejs/concurrency#event-loop",children:"event loop"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Node, on the other hand, uses an event loop in a ",(0,r.jsx)(n.strong,{children:'"single-threaded"'})," model."]}),"\n",(0,r.jsxs)(n.p,{children:["Under the hood, ",(0,r.jsx)(n.strong,{children:"Node does run multiple threads"}),". However, JavaScript code running in Node.js is ",(0,r.jsx)(n.strong,{children:"single-threaded"})," (it can only execute one chunk of code at a time) in a ",(0,r.jsx)(n.strong,{children:"single process"}),"."]}),"\n",(0,r.jsx)(n.p,{children:'This "single-threaded" model means there is no simultaneous access to shared memory, but there is also no process or thread isolation between requests. They\'re all served by the same code running in the same process via the same event loop.'}),"\n",(0,r.jsx)(n.p,{children:"These events are typically surfaced in your application by registering callback functions, which Node will invoke when the specific events arise."}),"\n",(0,r.jsxs)(n.p,{children:[":::infoKey takeaway\nIn a general sense, ",(0,r.jsx)(n.strong,{children:"only one function in code is running at any one time"}),".\n:::"]}),"\n",(0,r.jsx)(n.h2,{id:"asynchronous-development",children:"Asynchronous Development"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"V\xed d\u1ee5 nh\xe0 h\xe0ng c\xf3 \u0111\u1ea7u b\u1ebfp, ph\u1ee5c v\u1ee5 v\xe0 kh\xe1ch. Ph\u1ee5c v\u1ee5 h\u1ecfi kh\xe1ch mu\u1ed1n order g\xec r\u1ed3i b\xe1o cho \u0111\u1ea7u b\u1ebfp l\xe0m, sau khi \u0111\u1ea7u b\u1ebfp l\xe0m xong th\xec \u0111\u01b0a ra cho kh\xe1ch."})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"1 ph\u1ee5c v\u1ee5 c\xf3 th\u1ec3 ph\u1ee5c v\u1ee5 nhi\u1ec1u kh\xe1ch c\xf9ng l\xfac, b\u1eb1ng c\xe1ch ph\u1ee5c v\u1ee5 kh\xf4ng \u0111\u1ee3i ai \u0111\u1ec3 ho\xe0n th\xe0nh vi\u1ec7c c\u1ea3. N\u1ebfu ph\u1ee5c v\u1ee5 m\xe0 \u0111\u1ee3i (v\xed d\u1ee5 \u0111\u1ee3i \u0111\u1ea7u b\u1ebfp n\u1ea5u xong th\xec m\u1edbi \u0111i l\u1ea5y order kh\xe1ch, ho\u1eb7c \u0111\u1ee3i kh\xe1ch) th\xec s\u1ebd r\u1ea5t t\u1ec7."})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Trong th\u1ef1c t\u1ebf \u0111\u1ea7u b\u1ebfp l\xe0 database, ph\u1ee5c v\u1ee5 l\xe0 ph\u1ee5c v\u1ee5 HTTP response l\u1ea1i cho kh\xe1ch HTTP request."})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"function serveCustomer(customer) {\n  let order = customer.placeOrder(menu)\n  let food = cook.prepareFood(order)\n  let tip = customer.eatAndPay(food)\n  return tip\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"In a traditional server-side scenario, each customer may be served in their own process or thread. As v\xed d\u1ee5 mentioned before, the above code is not working since a function with a series of blocking actions will prevent anything else from happening."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsx)(n.mrow,{children:(0,r.jsx)(n.mo,{children:"\u2192"})}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\rightarrow"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.3669em"}}),(0,r.jsx)(n.span,{className:"mrel",children:"\u2192"})]})})]})," Node can help us in asynchronous way:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// traditional way, this code is kinda hard to read\nfunction serveCustomer(customer, done) {\n  customer.placeOrder(menu, (error, order) => {\n    cook.prepareFood(order, (error, food) => {\n      customer.eatAndPay(food, done);\n    })\n  })\n}\n// promises way\nfunction serveCustomer(customer) {\n  return customer.placeOrder(menu)\n    .then(order => cook.prepareFood(order))\n    .then(food => customer.eatAndPay(food))\n}\n// async/await way, readable like anti-pattern example above\nconst serveCustomer = async (customer) => {\n  let order = await customer.placeOrder(menu)\n  let food = await cook.prepareFood(order)\n  let tip = await customer.eatAndPay(food)\n  return tip\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["V\xed d\u1ee5 \u1edf tr\xean, khi g\u1ecdi \u0111\u1ebfn ",(0,r.jsx)(n.code,{children:"serveCustomer"})," th\xec s\u1ebd \u0111\u01b0\u1ee3c return immediately (\u0111i\u1ec1u n\xe0y gi\xfap ta c\xf3 th\u1ec3 l\xe0m vi\u1ec7c kh\xe1c -> m\u1ea5u ch\u1ed1t c\u1ee7a l\xe0m vi\u1ec7c simultaneously). T\u1ea1i m\u1ed9t th\u1eddi \u0111i\u1ec3m trong t\u01b0\u01a1ng lai, h\xe0m ",(0,r.jsx)(n.code,{children:"done"})," s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi & ta bi\u1ebft customer \u0111\xf3 \u0111\xe3 \u0111\u01b0\u1ee3c ph\u1ee5c v\u1ee5."]}),"\n",(0,r.jsxs)(n.p,{children:[":::noteThink Asynchronous\nThink of our application as a collection of functions that ",(0,r.jsx)(n.strong,{children:"react to events"}),", which invoke work that will cause ",(0,r.jsx)(n.strong,{children:"future"})," events to be fired and so on.\n:::"]}),"\n",(0,r.jsx)(n.h2,{id:"node-apis",children:"Node APIs"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"util.promisify(callback)"})}),"\n",(0,r.jsx)(n.h2,{id:"streams",children:"Streams"}),"\n",(0,r.jsx)(n.h3,{id:"readable-streams",children:"Readable Streams"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Events"}),": ",(0,r.jsx)(n.code,{children:"readable"}),", ",(0,r.jsx)(n.code,{children:"data"}),", ",(0,r.jsx)(n.code,{children:"end"}),", ",(0,r.jsx)(n.code,{children:"error"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Methods"}),": ",(0,r.jsx)(n.code,{children:"read"}),", ",(0,r.jsx)(n.code,{children:"pause"}),", ",(0,r.jsx)(n.code,{children:"resume"}),", ",(0,r.jsx)(n.code,{children:"destroy"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Properties"}),": ",(0,r.jsx)(n.code,{children:"readable"}),". ",(0,r.jsx)(n.code,{children:"readableLength"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"writable-streams",children:"Writable Streams"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Events"}),": ",(0,r.jsx)(n.code,{children:"drain"}),", ",(0,r.jsx)(n.code,{children:"close"}),", ",(0,r.jsx)(n.code,{children:"finish"}),", ",(0,r.jsx)(n.code,{children:"error"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Methods"}),": ",(0,r.jsx)(n.code,{children:"write"}),", ",(0,r.jsx)(n.code,{children:"end"}),", ",(0,r.jsx)(n.code,{children:"destroy"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Properties"}),": ",(0,r.jsx)(n.code,{children:"writable"}),". ",(0,r.jsx)(n.code,{children:"writableLength"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"piping-streams",children:"Piping Streams"}),"\n",(0,r.jsx)(n.p,{children:"Because readable and writeable streams both have a consistent interface for applying and coping with back pressure, you can pipe a readable stream to a writeable stream, and the back pressure will be communicated from one stream back to the other."}),"\n",(0,r.jsx)(n.h3,{id:"readwrite-streams-duplex-transform",children:"Read/Write Streams (Duplex, Transform)"}),"\n",(0,r.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,r.jsx)(n.p,{children:"Mocha: test framework. (e.g. BDD: group tests)"}),"\n",(0,r.jsx)(n.p,{children:"Chai: assertion library."}),"\n",(0,r.jsx)(n.p,{children:"Sinon: spies, stubs and mocks."}),"\n",(0,r.jsxs)(n.p,{children:["Istanbul: code coverage. The CLI for this tool is called ",(0,r.jsx)(n.code,{children:"nyc"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>a});var r=s(7294);const i={},t=r.createContext(i);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);