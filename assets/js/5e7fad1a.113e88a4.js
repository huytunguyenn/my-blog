"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2878],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(t),g=r,d=m["".concat(s,".").concat(g)]||m[g]||u[g]||l;return t?a.createElement(d,i(i({ref:n},c),{},{components:t})):a.createElement(d,i({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9608:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const l={},i="Collection",o={unversionedId:"learn/language/golang/collection",id:"learn/language/golang/collection",title:"Collection",description:"Array",source:"@site/docs/learn/language/golang/6-collection.mdx",sourceDirName:"learn/language/golang",slug:"/learn/language/golang/collection",permalink:"/my-blog/docs/learn/language/golang/collection",draft:!1,editUrl:"https://github.com/huytunguyenn/my-blog/tree/main/docs/learn/language/golang/6-collection.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"docs",previous:{title:"Flow",permalink:"/my-blog/docs/learn/language/golang/statement"},next:{title:"Function and method",permalink:"/my-blog/docs/learn/language/golang/function-method"}},s={},p=[{value:"Array",id:"array",level:2},{value:"Slice",id:"slice",level:2},{value:"Map",id:"map",level:2},{value:"Struct",id:"struct",level:2}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"collection"},"Collection"),(0,r.kt)("h2",{id:"array"},"Array"),(0,r.kt)("p",null,"An array in Go is a fixed sized entity. All elements in an array must have same type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// long way\nvar arr [3]int\narr[0] = 1\narr[1] = 2\narr[2] = 3\n\n// short way\narr := [3]int{1, 2, 3}\n\n\n// highlight\n> [1 2 3]\n")),(0,r.kt)("h2",{id:"slice"},"Slice"),(0,r.kt)("p",null,"Slice is built on top of array. It is like array, but ",(0,r.kt)("em",{parentName:"p"},"dynamically sized")," and offer up a lot of really ",(0,r.kt)("em",{parentName:"p"},"neat attributes")," <- ",(0,r.kt)("strong",{parentName:"p"},"used more than array")),(0,r.kt)("p",null,"Therefore, you can create slice from array by using ",(0,r.kt)("inlineCode",{parentName:"p"},"[start:end]"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"arr := [3]int{1, 2, 3}\nslice := arr[:] // [:] means from start to end\n")),(0,r.kt)("p",null,"Slice is kind of pointer, not really, but it is pointing to underlying array. Change ",(0,r.kt)("inlineCode",{parentName:"p"},"arr")," will change ",(0,r.kt)("inlineCode",{parentName:"p"},"slice")," as well."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"arr[1] = 42\nslice[2] = 27\n\n\n// highlight-start\n> arr: [1 42 27]\n> slice: [1 42 27]\n// highlight-end\n")),(0,r.kt)("p",null,"Otherwise, create a new slice:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"slice := []int{1, 2, 3}\n")),(0,r.kt)("p",null,"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"append(slice, elements...)")," to add new ",(0,r.kt)("inlineCode",{parentName:"p"},"elements")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"slice"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"slice = append(slice, 4, 5, 6)\n\n\n// highlight\n> slice: [1 2 3 4 5 6]\n")),(0,r.kt)("p",null,"Just like create slice from array, we can also create sub slices from slice using ",(0,r.kt)("inlineCode",{parentName:"p"},"[start:end]")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"s2 := slice[1:]\ns3 := slice[:2]\ns4 := slice[1:2]\n\n\n// highlight-start\n> s2: [2 3 4 5 6]\n> s3: [1 2]\n> s4: [2]\n// highlight-end\n")),(0,r.kt)("h2",{id:"map"},"Map"),(0,r.kt)("p",null,"Map represents key-value relationship. To create map, use ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," keyword."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'m := map[string]int{ "foo" : 42 }\n\n\n// highlight-start\n> m: map[foo:42]\n> m["foo"]: 42\n// highlight-end\n')),(0,r.kt)("p",null,"All the keys had to be the same type, same with all the values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'m["foo"] = 27\n// -error\nm["foo"] = "bar" // error: (type string) cannot be represented by the type int\n')),(0,r.kt)("p",null,"You can delete a pair using ",(0,r.kt)("inlineCode",{parentName:"p"},"delete(map, key)"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'delete(m, "foo")\n\n\n// highlight\n> m: map[]\n')),(0,r.kt)("h2",{id:"struct"},"Struct"),(0,r.kt)("p",null,"Go doesn't have class, but it has ",(0,r.kt)("inlineCode",{parentName:"p"},"struct"),"."),(0,r.kt)("p",null,"This is the only collection type that allows ",(0,r.kt)("strong",{parentName:"p"},"associate disparate data types together"),"."),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"struct"),", field is fixed at compile time. To declare a ",(0,r.kt)("inlineCode",{parentName:"p"},"struct"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type user struct {\n  ID        int\n  FirstName string\n  LastName  string\n}\n")),(0,r.kt)("p",null,"To add the value to field:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"var u user\n\n\n// highlight\n> u: {0  } // struct initialized with 0 value (0 in int is 0, 0 in string in blank)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'u.ID = 1\nu.FirstName = "Huy"\nu.LastName = "Tu"\n\n\n// highlight\n> u: {1 Huy Tu}\n')),(0,r.kt)("p",null,"Note that the fields are fixed at compile time, means it cannot be dynamically added or removed."),(0,r.kt)("p",null,"There's also an implicit way to declare ",(0,r.kt)("inlineCode",{parentName:"p"},"struct"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'u := user{ID: 1, FirstName: "Huy", LastName: "Tu"}\n\n\n// highlight\n> u: {1 Huy Tu}\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"If you use multiple lines declaration, you will need to ",(0,r.kt)("strong",{parentName:"p"},"add a comma at the end"),"."),(0,r.kt)("p",{parentName:"admonition"},"Below declaration will get error:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-go"},'u := user{ ID: 1,\n  FirstName: "Huy",\n  // -error\n  LastName: "Tu" // error: Need a trailing comma before a newline in the composite literal\n}\n'))))}u.isMDXComponent=!0}}]);