"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4822],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,y=d["".concat(l,".").concat(m)]||d[m]||s[m]||o;return r?n.createElement(y,p(p({ref:t},u),{},{components:r})):n.createElement(y,p({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,p=new Array(o);p[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,p[1]=i;for(var c=2;c<o;c++)p[c]=r[c];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5267:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>s,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_label:"heap",description:"Heap"},p="Heap",i={unversionedId:"learn/data-structure/heap",id:"learn/data-structure/heap",title:"Heap",description:"Heap",source:"@site/docs/learn/data-structure/4-heap.mdx",sourceDirName:"learn/data-structure",slug:"/learn/data-structure/heap",permalink:"/my-blog/docs/learn/data-structure/heap",draft:!1,editUrl:"https://github.com/huytunguyenn/my-blog/tree/main/docs/learn/data-structure/4-heap.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"heap",description:"Heap"},sidebar:"docs",previous:{title:"stack / queue",permalink:"/my-blog/docs/learn/data-structure/stack-queue"},next:{title:"tree / graph",permalink:"/my-blog/docs/learn/data-structure/tree-graph"}},l={},c=[{value:"Heap types",id:"heap-types",level:2},{value:"Building a heap",id:"building-a-heap",level:2}],u={toc:c};function s(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"heap"},"Heap"),(0,a.kt)("p",null,"Before diving to heap, let's review types of binary tree, there are 3 of them:"),(0,a.kt)("p",null,"Heaps are ",(0,a.kt)("strong",{parentName:"p"},"complete binary trees")," (which means )."),(0,a.kt)("h2",{id:"heap-types"},"Heap types"),(0,a.kt)("p",null,"There are 2 types of heap:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Min-heap: every parent < its children"),(0,a.kt)("li",{parentName:"ul"},"Max-heap: every parent > its children")),(0,a.kt)("p",null,"So, it means with min-heap, the smallest element is most parent node."),(0,a.kt)("h2",{id:"building-a-heap"},"Building a heap"))}s.isMDXComponent=!0}}]);