"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3931],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),g=d(n),c=r,m=g["".concat(s,".").concat(c)]||g[c]||u[c]||l;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},4623:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_label:"collections"},i="Collections",o={unversionedId:"learn/language/java/collection",id:"learn/language/java/collection",title:"Collections",description:"Arrays",source:"@site/docs/learn/language/java/6-collection.mdx",sourceDirName:"learn/language/java",slug:"/learn/language/java/collection",permalink:"/my-blog/docs/learn/language/java/collection",draft:!1,editUrl:"https://github.com/huytunguyenn/my-blog/tree/main/docs/learn/language/java/6-collection.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_label:"collections"},sidebar:"docs",previous:{title:"statements",permalink:"/my-blog/docs/learn/language/java/statement"},next:{title:"methods",permalink:"/my-blog/docs/learn/language/java/function-method"}},s={},d=[{value:"Arrays",id:"arrays",level:2},{value:"Strings",id:"strings",level:2},{value:"String Class",id:"string-class",level:3},{value:"Equality",id:"equality",level:3},{value:"Interning string",id:"interning-string",level:4},{value:"Methods",id:"methods",level:3},{value:"Conversions",id:"conversions",level:3},{value:"StringBuilder",id:"stringbuilder",level:3},{value:"Formatting",id:"formatting",level:3}],p={toc:d};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"collections"},"Collections"),(0,r.kt)("h2",{id:"arrays"},"Arrays"),(0,r.kt)("p",null,"Arrays provide an ordered collection of elements"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"float[] theVals = new float[3];\nfloat[] theVals = { 10.0f, 20.0f, 15.0f };\n")),(0,r.kt)("h2",{id:"strings"},"Strings"),(0,r.kt)("h3",{id:"string-class"},"String Class"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String name = "Tu";\nString greeting = "Hello " + name;\ngreeting += " good to see you!";\n')),(0,r.kt)("p",null,"String variables do not directly hold the string value, it hold ",(0,r.kt)("strong",{parentName:"p"},"a reference")," to the instance of string."),(0,r.kt)("p",null,"String are immutable. So when we change the value, it actually creates a entirely new instance of the string."),(0,r.kt)("p",null,"This is how above code work under the hood:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"name  --------  | T | u |\n                | H | e | l | l | o |\n                | H | e | l | l | o | | T | u |\ngreeting -----  | H | e | l | l | o | | T | u | | g | o | o | d | | t | o | s | e | e | | y | o | u | ! |\n")),(0,r.kt)("h3",{id:"equality"},"Equality"),(0,r.kt)("p",null,"Equality operator ",(0,r.kt)("inlineCode",{parentName:"p"},"==")," check if both string variables reference the same string instance."),(0,r.kt)("p",null,"To perform character-by-character comparision, use ",(0,r.kt)("inlineCode",{parentName:"p"},"s.equal()"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String s1 = "I love";\ns1 += " you";\nString s2 = "I";\ns2 += " love you";\n\nif( s1 == s2 ) { // false\n}\nif (s1.equals(s2)) { // true\n}\n')),(0,r.kt)("h4",{id:"interning-string"},"Interning string"),(0,r.kt)("p",null,"Interning a string will canonicalize value and enable reliable ",(0,r.kt)("inlineCode",{parentName:"p"},"=="),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// above example\nString s3 = s1.intern();\nString s4 = s2.intern();\n\nif ( s3 == s4 ){ // true\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"s1 --- abc\ns2 --- abc\n\ns3 --- abc (it search for interned version of s1, if no, create)\n    /\ns4 /       (reference to that interned version)\n")),(0,r.kt)("p",null,"We only should use ",(0,r.kt)("inlineCode",{parentName:"p"},"intern")," when we compare strings frequently."),(0,r.kt)("h3",{id:"methods"},"Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Operation"),(0,r.kt)("th",{parentName:"tr",align:null},"Methods"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Length"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"length"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Create new string(s) from existing"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"concat")," ",(0,r.kt)("inlineCode",{parentName:"td"},"replace")," ",(0,r.kt)("inlineCode",{parentName:"td"},"toLowerCase")," ",(0,r.kt)("inlineCode",{parentName:"td"},"toUpperCase")," ",(0,r.kt)("inlineCode",{parentName:"td"},"trim")," ",(0,r.kt)("inlineCode",{parentName:"td"},"split"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Extract substring"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"charAt")," ",(0,r.kt)("inlineCode",{parentName:"td"},"substring"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Test substring"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"contains")," ",(0,r.kt)("inlineCode",{parentName:"td"},"endsWith")," ",(0,r.kt)("inlineCode",{parentName:"td"},"startsWith")," ",(0,r.kt)("inlineCode",{parentName:"td"},"indexOf")," ",(0,r.kt)("inlineCode",{parentName:"td"},"lastIndexOf"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Comparison"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"equals")," ",(0,r.kt)("inlineCode",{parentName:"td"},"equalsIgnoreCase")," ",(0,r.kt)("inlineCode",{parentName:"td"},"isEmpty")," ",(0,r.kt)("inlineCode",{parentName:"td"},"compareTo")," ",(0,r.kt)("inlineCode",{parentName:"td"},"compareToIgnoreCase"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Formatting"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"format"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"String for non-string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"valueOf"))))),(0,r.kt)("h3",{id:"conversions"},"Conversions"),(0,r.kt)("h3",{id:"stringbuilder"},"StringBuilder"),(0,r.kt)("p",null,"Strings are immutable. So we have ",(0,r.kt)("inlineCode",{parentName:"p"},"StringBuilder"),", it provides mutable string buffer."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"StringBuilder")," itself is not a string, we need to convert it to a string."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String title = "student";\nint age = 18;\n\nStringBuilder sb = new StringBuilder(34);\nsb.append("I am a ");\nsb.append(title);\nsb.append(" at ");\nsb.append(age);\n\nString str = sb.toString();  // "I am a student at 18"\n\nString major = "software engineering";\nint pos = sb.indexOf(" student");\nsb.insert(pos, major);\nsb.insert(pos, " ");\nString message = sb.toString();  // "I am a software engineering student at 18"\n')),(0,r.kt)("h3",{id:"formatting"},"Formatting"))}u.isMDXComponent=!0}}]);