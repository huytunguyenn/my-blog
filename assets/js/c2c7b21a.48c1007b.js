"use strict";(self.webpackChunktu_website=self.webpackChunktu_website||[]).push([[2722],{6648:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var r=s(5893),i=s(1151);const t={sidebar_label:"wrapper"},a="Wrapper Classes",l={id:"learn/language/java/wrapper-classes",title:"Wrapper Classes",description:"Primitive Wrappers",source:"@site/docs/learn/language/java/11-wrapper-classes.mdx",sourceDirName:"learn/language/java",slug:"/learn/language/java/wrapper-classes",permalink:"/my-blog/docs/learn/language/java/wrapper-classes",draft:!1,unlisted:!1,editUrl:"https://github.com/huytunguyenn/my-blog/tree/main/docs/learn/language/java/11-wrapper-classes.mdx",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_label:"wrapper"},sidebar:"docs",previous:{title:"oop",permalink:"/my-blog/docs/learn/language/java/oop"},next:{title:"advanced",permalink:"/my-blog/docs/learn/language/java/advanced"}},c={},d=[{value:"Primitive Wrappers",id:"primitive-wrappers",level:2},{value:"Implementation",id:"implementation",level:3},{value:"Converting",id:"converting",level:3},{value:"Strings",id:"strings",level:2},{value:"String Class",id:"string-class",level:3},{value:"Equality",id:"equality",level:3},{value:"Interning string",id:"interning-string",level:3},{value:"Methods",id:"methods",level:3},{value:"Conversions",id:"conversions",level:3},{value:"StringBuilder",id:"stringbuilder",level:3},{value:"Formatting",id:"formatting",level:3}];function o(e){const n={annotation:"annotation",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",math:"math",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"wrapper-classes",children:"Wrapper Classes"}),"\n",(0,r.jsx)(n.h2,{id:"primitive-wrappers",children:"Primitive Wrappers"}),"\n",(0,r.jsx)(n.p,{children:"Primitive data types represent data only, they are unable to provide methods for operating."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsx)(n.mrow,{children:(0,r.jsx)(n.mo,{children:"\u2192"})}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"\\rightarrow"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.3669em"}}),(0,r.jsx)(n.span,{className:"mrel",children:"\u2192"})]})})]})," ",(0,r.jsx)(n.strong,{children:"Wrapper classes"}),". Each primitive type has a wrapper class:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["byte, short, int, long: ",(0,r.jsx)(n.code,{children:"Byte"}),", ",(0,r.jsx)(n.code,{children:"Short"}),", ",(0,r.jsx)(n.code,{children:"Integer"}),", ",(0,r.jsx)(n.code,{children:"Long"})]}),"\n",(0,r.jsxs)(n.li,{children:["float, double: ",(0,r.jsx)(n.code,{children:"Float"}),", ",(0,r.jsx)(n.code,{children:"Double"})]}),"\n",(0,r.jsxs)(n.li,{children:["char: ",(0,r.jsx)(n.code,{children:"Character"})]}),"\n",(0,r.jsxs)(n.li,{children:["boolean: ",(0,r.jsx)(n.code,{children:"Boolean"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"int valA = 10;\nInteger valB = 10;\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"valA"})," is a primitive type, so it directly stores value of 10."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"valB"})," is a reference type, it holds a reference, that reference refers to an instance of ",(0,r.jsx)(n.code,{children:"Integer"})," class."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"valA [10]\nvalB [] ------\x3e (20)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"implementation",children:"Implementation"}),"\n",(0,r.jsx)(n.p,{children:"E.g."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"int"})," is a primitive value, it is stored on the object field or on the ",(0,r.jsx)(n.strong,{children:"stack"}),", takes up 4 bytes directly (",(0,r.jsx)(n.code,{children:"| 4 byte int |"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Integer"})," is boxed numerics, it is the whole object lies on the ",(0,r.jsx)(n.strong,{children:"heap"}),", so it needs a ",(0,r.jsx)(n.strong,{children:"pointer"}),", takes up 24 bytes or 64bit JVM (",(0,r.jsx)(n.code,{children:"| Object Header | 4 byte int | Padding |"}),")."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"converting",children:"Converting"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"int valA = 10;\nInteger valB = 10;\nInteger valC = valA;  // boxing\nint valD = valB;  // unboxing\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Boxing"}),": convert from primitive type to a wrapper class."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Unboxing"}),": convert from a wrapper class to a primitive type."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The wrappers have methods to convert, but Java compiler helps to do these conversions automatically with ",(0,r.jsx)(n.strong,{children:"auto(un)boxing"}),". Instead of doing this,"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"int aPrimitive = 42;\nInteger anObject = new Integer(aPrimitive);\nmyList.add(anObject);  // suppose this method only accepts object parameter\n"})}),"\n",(0,r.jsx)(n.p,{children:"you can just do this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"int aPrimitive = 42;\nmyList.add(aPrimitive);  // auto: myList.add(new Integer(aPrimitive));\n\nInteger anObject = aPrimitive;  // auto: = new Integer(aPrimitive);\nint anotherPrimitive = anObject;  // auto: = anObject.intValue();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"strings",children:"Strings"}),"\n",(0,r.jsx)(n.h3,{id:"string-class",children:"String Class"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'String name = "Tu";\nString greeting = "Hello " + name;\ngreeting += " good to see you!";\n'})}),"\n",(0,r.jsxs)(n.p,{children:["String variables do not directly hold the string value, it hold ",(0,r.jsx)(n.strong,{children:"a reference"})," to the instance of string."]}),"\n",(0,r.jsx)(n.p,{children:"String are immutable. So when we change the value, it actually creates a entirely new instance of the string."}),"\n",(0,r.jsx)(n.p,{children:"This is how above code work under the hood:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"name  --------  | T | u |\n                | H | e | l | l | o |\n                | H | e | l | l | o | | T | u |\ngreeting -----  | H | e | l | l | o | | T | u | | g | o | o | d | | t | o | s | e | e | | y | o | u | ! |\n"})}),"\n",(0,r.jsx)(n.h3,{id:"equality",children:"Equality"}),"\n",(0,r.jsxs)(n.p,{children:["Equality operator ",(0,r.jsx)(n.code,{children:"=="})," check if both string variables reference the same string instance."]}),"\n",(0,r.jsxs)(n.p,{children:["To perform character-by-character comparision, use ",(0,r.jsx)(n.code,{children:"s.equal()"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'String s1 = "I love";\ns1 += " you";\nString s2 = "I";\ns2 += " love you";\n\nif( s1 == s2 ) { // false, this compare reference\n}\nif (s1.equals(s2)) { // true, compare value\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"interning-string",children:"Interning string"}),"\n",(0,r.jsxs)(n.p,{children:["Interning a string will canonicalize value and enable reliable ",(0,r.jsx)(n.code,{children:"=="}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// above example\nString s3 = s1.intern();\nString s4 = s2.intern();\n\nif ( s3 == s4 ){ // true\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"What it actually does:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"s1 --- abc\ns2 --- abc\n\ns3 --- abc (first time, search for interned version of s1, if no, create)\n    /\ns4 /       (next time, only need to reference to that interned version)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We only should use ",(0,r.jsx)(n.code,{children:"intern"})," when we compare strings ",(0,r.jsx)(n.strong,{children:"frequently"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Operation"}),(0,r.jsx)(n.th,{children:"Methods"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Length"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"length"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Create new string(s) from existing"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"concat"})," ",(0,r.jsx)(n.code,{children:"replace"})," ",(0,r.jsx)(n.code,{children:"toLowerCase"})," ",(0,r.jsx)(n.code,{children:"toUpperCase"})," ",(0,r.jsx)(n.code,{children:"trim"})," ",(0,r.jsx)(n.code,{children:"split"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Extract substring"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"charAt"})," ",(0,r.jsx)(n.code,{children:"substring"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Test substring"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"contains"})," ",(0,r.jsx)(n.code,{children:"endsWith"})," ",(0,r.jsx)(n.code,{children:"startsWith"})," ",(0,r.jsx)(n.code,{children:"indexOf"})," ",(0,r.jsx)(n.code,{children:"lastIndexOf"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Comparison"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"equals"})," ",(0,r.jsx)(n.code,{children:"equalsIgnoreCase"})," ",(0,r.jsx)(n.code,{children:"isEmpty"})," ",(0,r.jsx)(n.code,{children:"compareTo"})," ",(0,r.jsx)(n.code,{children:"compareToIgnoreCase"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Formatting"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"format"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"String for non-string"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"valueOf"})})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"conversions",children:"Conversions"}),"\n",(0,r.jsx)(n.h3,{id:"stringbuilder",children:"StringBuilder"}),"\n",(0,r.jsxs)(n.p,{children:["Strings are immutable. So we have ",(0,r.jsx)(n.code,{children:"StringBuilder"}),", it provides mutable string buffer."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"StringBuilder"})," itself is not a string, we need to convert it to a string."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'String title = "student";\nint age = 18;\n\nStringBuilder sb = new StringBuilder(34);\nsb.append("I am a ");\nsb.append(title);\nsb.append(" at ");\nsb.append(age);\n\nString str = sb.toString();  // "I am a student at 18"\n\nString major = "software engineering";\nint pos = sb.indexOf(" student");\nsb.insert(pos, major);\nsb.insert(pos, " ");\nString message = sb.toString();  // "I am a software engineering student at 18"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"formatting",children:"Formatting"})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>a});var r=s(7294);const i={},t=r.createContext(i);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);