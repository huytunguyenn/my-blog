"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[434],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),g=r,d=u["".concat(s,".").concat(g)]||u[g]||m[g]||i;return t?a.createElement(d,o(o({ref:n},c),{},{components:t})):a.createElement(d,o({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4361:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_position:4},o="Data types",l={unversionedId:"learn/languages/golang/data-types",id:"learn/languages/golang/data-types",title:"Data types",description:"Data types in Go",source:"@site/docs/learn/languages/golang/data-types.mdx",sourceDirName:"learn/languages/golang",slug:"/learn/languages/golang/data-types",permalink:"/my-blog/docs/learn/languages/golang/data-types",draft:!1,editUrl:"https://github.com/huytunguyenn/my-blog/tree/main/docs/learn/languages/golang/data-types.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docs",previous:{title:"Install and configure",permalink:"/my-blog/docs/learn/languages/golang/install"},next:{title:"Collection",permalink:"/my-blog/docs/learn/languages/golang/collection"}},s={},p=[{value:"Declaration and primitives",id:"declaration-and-primitives",level:2},{value:"Pointer",id:"pointer",level:2},{value:"Address of a variable",id:"address-of-a-variable",level:3},{value:"Constant",id:"constant",level:2},{value:"Implicit typed",id:"implicit-typed",level:3},{value:"iota",id:"iota",level:3},{value:"constant expression",id:"constant-expression",level:3}],c={toc:p};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-types"},"Data types"),(0,r.kt)("p",null,"Data types in Go"),(0,r.kt)("h2",{id:"declaration-and-primitives"},"Declaration and primitives"),(0,r.kt)("p",null,"There are many ways to declare a variable. Most basic three initializations are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"explicit: declare the type + ",(0,r.kt)("inlineCode",{parentName:"li"},"var")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"const")," syntax"),(0,r.kt)("li",{parentName:"ul"},"explicit inline"),(0,r.kt)("li",{parentName:"ul"},"implicit: using ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},":=")),", compiler will declare the type for you <- ",(0,r.kt)("strong",{parentName:"li"},"used most of the time"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// explicit\nvar i int\ni = 42\n\n// explicit inline\nvar f float32 = 3.14\n\n// implicit\nsomeString := "Go is great!"\n')),(0,r.kt)("p",null,"Some primitives:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"someString := \"Go\"\n// -error\nsomeString := 'Go' // error: more than one character in rune literal\nsomeBool := true\nsomeComplex := complex(3, 4)\nsomeReal, someIm := real(someComplex), imag(someComplex) // split out complex number into its real & imaginary components\n\n// highlight-start\n(3 + 4i), complex number: s\u1ed1 ph\u1ee9c, i^2 = -1\n> someComplex: (+3.000000e+000+4.000000e+000i)\n> someReal: +3.000000e+000\n> someIm: +4.000000e+000\n// highlight-end\n")),(0,r.kt)("h2",{id:"pointer"},"Pointer"),(0,r.kt)("p",null,"Pointer holds the address of a location in memory that holds the variable."),(0,r.kt)("p",null,"If you are not pointing the pointer to anything when declared, it will get error when assigned."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'var myName *string // not pointing to anything -> so it is <nil>\n\n// -error\n*myName = "huytu" // runtime error: invalid memory address or nil pointer dereference\n')),(0,r.kt)("p",null,"Therefore, you will need to assign ",(0,r.kt)("inlineCode",{parentName:"p"},"new")," for pointer when initialized. You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," operator to reach though the pointer and grab the data back, this is call ",(0,r.kt)("strong",{parentName:"p"},"de-referencing"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'var myName *string = new(string) // not :=\n*myName = "huytu"   // de-referencing\n\n\n// highlight-start\n> b: 0xc000040250\n> *b: huytu\n// highlight-end\n')),(0,r.kt)("h3",{id:"address-of-a-variable"},"Address of a variable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'myName := "huytu"\nptr := &myName\n// change value\nmyName = "zzzz"\n\n\n// highlight-start\n> ptr: 0xc000040250\n> *ptr: huytu\nafter change value\n> ptr: 0xc000040250\n> *ptr: zzzz\n// highlight-end\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"You can see, I use ",(0,r.kt)("inlineCode",{parentName:"em"},":=")," for implicit declare, ",(0,r.kt)("inlineCode",{parentName:"em"},"=")," for assign operator.")),(0,r.kt)("h2",{id:"constant"},"Constant"),(0,r.kt)("p",null,"Constant is constant, it cannot be assigned after created."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"const pi = 3.1415\n// -error\npi = 3 // cannot assign to pi (untyped float constant 3.1415)\n")),(0,r.kt)("h3",{id:"implicit-typed"},"Implicit typed"),(0,r.kt)("p",null,"Implicit syntax means compiler will interpret type as appropriate."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// implicit\nconst c = 3 // not declare type, but it knows it's integer\n\n// explicit\nconst c int = 3\n")),(0,r.kt)("p",null,"Constant have to be ",(0,r.kt)("strong",{parentName:"p"},"defined at compile time"),". If you set up a constant expression and set it equal to the return value of a function, you will get an error."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"const c int = 3\nres1 := c + 3\n// -error\nres2 := c + 1.2 // error: (untyped float constant) truncated to int\n\n\n// highlight-start\n> res1: 6\n>\n// highlight-end\n")),(0,r.kt)("p",null,"To fix this, you will need to convert first."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"const c int = 3\nres1 := c + 3\nres2 := float32(c) + 1.2\n\n\n// highlight-start\n> res1: 6\n> res2: 4.2\n// highlight-end\n\n// -error\nres1 = float32(c) + 1.2 // warning: cannot use 'float32(c) + 1.2' (type float32) as the type int\n")),(0,r.kt)("p",null,"Note that Go is a statically typed language, which means types of variables must be known at compile time, and you can't change their type at runtime."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The standard naming convention is to ",(0,r.kt)("strong",{parentName:"p"},"use PascalCase for constants"),". E.g.: ",(0,r.kt)("inlineCode",{parentName:"p"},"MyConst")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"MY_CONST"),".")),(0,r.kt)("h3",{id:"iota"},"iota"),(0,r.kt)("p",null,"Look at some examples here:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"const (\n    first = iota\n    second\n)\n\nconst (\n    third = iota\n    fourth\n)\n\n\n// highlight-start\n> first: 0\n> second: 1\n> third: 0\n> fourth: 1\n// highlight-end\n")),(0,r.kt)("p",null,"And another example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'const (\n    first  = 1\n    second = "second"\n    three  = iota\n    four   = iota\n)\n\nfunc main() {\n    println(three, four)\n    println(first, second)\n    println(three, four)\n}\n\n\n// highlight-start\n> 2 3\n> 1 second\n> 2 3\n// highlight-end\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Can you guess how ",(0,r.kt)("inlineCode",{parentName:"em"},"iota")," works?")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"iota")," keyword represents successive integer constants 0, 1, 2, ...:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Increments ",(0,r.kt)("em",{parentName:"li"},"after each usage")," (aka ",(0,r.kt)("inlineCode",{parentName:"li"},"const")," specification)"),(0,r.kt)("li",{parentName:"ul"},"Resets to 0 whenever the word ",(0,r.kt)("inlineCode",{parentName:"li"},"const")," appears")),(0,r.kt)("h3",{id:"constant-expression"},"constant expression"),(0,r.kt)("p",null,"You can use many constant expressions with ",(0,r.kt)("inlineCode",{parentName:"p"},"iota")," as well."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"const (\n    first  = iota + 6\n    second = 2 << iota\n)\n\n\n// highlight-start\n> first: 6\n> second: 4 (2 << 1)\n// highlight-end\n")),(0,r.kt)("p",null,"If you don't need to write ",(0,r.kt)("inlineCode",{parentName:"p"},"iota")," expression on every line of constants, one on the first const means apply all for the rest."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"const (\n    first = iota + 6\n    second // shortcut for `second: iota + 6`\n)\n\nconst (\n    third = iota\n)\n\n\n// highlight-start\n> first: 6\n> second: 7\n> third: 0\n// highlight-end\n\n// -error-start\nconst (\n    first\n    second = iota // error: missing value in the const declaration\n    third\n)\n// -error-end\n")),(0,r.kt)("p",null,"You can use the blank identifier ",(0,r.kt)("inlineCode",{parentName:"p"},"_")," to skip a value in a list of constants."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"const (\n    first = iota + 1\n    _\n    third\n    fourth\n)\n\n\n// highlight-start\n> first: 1\n> third: 3\n> fourth: 4\n// highlight-end\n")),(0,r.kt)("p",null,"Another common application for iota is to implement a ",(0,r.kt)("strong",{parentName:"p"},"bitmask"),", a small set of booleans, often called flags, represented by the bits in a single number. ",(0,r.kt)("a",{parentName:"p",href:"https://yourbasic.org/golang/bitmask-flag-set-clear/"},"Read more")),(0,r.kt)("h1",{id:"custom-data-types"},"Custom data types"))}m.isMDXComponent=!0}}]);